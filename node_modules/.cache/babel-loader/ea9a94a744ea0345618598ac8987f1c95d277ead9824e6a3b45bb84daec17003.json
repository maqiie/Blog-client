{"ast":null,"code":"var _jsxFileName = \"/home/markpaul/projects/Blog-client/src/components/Blogs/Blogs.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"font-awesome/css/font-awesome.min.css\";\n\n// import axios from \"axios\";\n// import \"./Blogs.css\";\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const authToken = localStorage.getItem(\"authToken\"); // Assuming you store the authentication token in local storage\n//   const apiBaseUrl = \"http://localhost:3001\"; // Replace with your actual API base URL\n\n//   // Initialize like and dislike counts as objects with default values of 0\n//   const [likeCounts, setLikeCounts] = useState({});\n//   const [dislikeCounts, setDislikeCounts] = useState({});\n\n//   useEffect(() => {\n//     axios\n//       .get(`${apiBaseUrl}/posts`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//           Accept: \"application/json\",\n//         },\n//       })\n//       .then(async (response) => {\n//         setPosts(response.data);\n\n//         // Fetch like and dislike counts for each post\n//         const postPromises = response.data.map(async (post) => {\n//           try {\n//             const countsResponse = await axios.get(\n//               `${apiBaseUrl}/posts/${post.id}/like_dislike_counts`,\n//               {\n//                 headers: {\n//                   Authorization: `Bearer ${authToken}`,\n//                   Accept: \"application/json\",\n//                 },\n//               }\n//             );\n\n//             const { likes_count, dislikes_count } = countsResponse.data;\n//             const initialLikeCounts = {};\n//             const initialDislikeCounts = {};\n\n//             response.data.forEach((post) => {\n//               initialLikeCounts[post.id] = 0;\n//               initialDislikeCounts[post.id] = 0;\n\n//               // ...\n//             });\n//             // Update like and dislike counts in state for the specific post\n//             setLikeCounts((prevCounts) => ({\n//               ...prevCounts,\n//               [post.id]: likes_count,\n//             }));\n//             setDislikeCounts((prevCounts) => ({\n//               ...prevCounts,\n//               [post.id]: dislikes_count,\n//             }));\n\n//             // Attach like and dislike counts to the post object\n//             return { ...post, likes_count, dislikes_count };\n//           } catch (error) {\n//             console.error(\"Error fetching like/dislike counts:\", error);\n//             return post; // Return the original post if there was an error\n//           }\n//         });\n\n//         // Wait for all promises to resolve\n//         const postsWithCounts = await Promise.all(postPromises);\n\n//         // Update the state with posts including like and dislike counts\n//         setPosts(postsWithCounts);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching posts:\", error);\n//       });\n//   }, [authToken, apiBaseUrl]);\n//   const handleLikePost = (postId) => {\n//     axios\n//       .post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//       .then((response) => {\n//         // Handle success, e.g., update the UI to reflect the liked post\n//         console.log(\"Post liked successfully\");\n//         // Increment the like count for the post\n//         setLikeCounts((prevCounts) => ({\n//           ...prevCounts,\n//           [postId]: prevCounts[postId] + 1,\n//         }));\n//       })\n//       .catch((error) => {\n//         console.error(\"Error liking post:\", error);\n//       });\n//   };\n\n//   const handleDislikePost = (postId) => {\n//     axios\n//       .post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//       .then((response) => {\n//         // Handle success, e.g., update the UI to reflect the disliked post\n//         console.log(\"Post disliked successfully\");\n//         // Increment the dislike count for the post\n//         setDislikeCounts((prevCounts) => ({\n//           ...prevCounts,\n//           [postId]: prevCounts[postId] + 1,\n//         }));\n//       })\n//       .catch((error) => {\n//         console.error(\"Error disliking post:\", error);\n//       });\n//   };\n\n//   return (\n//     <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div key={index} className=\"post\">\n//             <h3 className=\"post-title\">{post.title}</h3>\n//             <p className=\"post-author\">By {post.author}</p>\n//             <div className=\"post-content\">{post.content}</div>\n//             {post.image_url && (\n//               <img\n//                 src={`${apiBaseUrl}${post.image_url}`} // Use the absolute image URL\n//                 alt={post.title} // Set an appropriate alt text\n//                 className=\"post-image\"\n//                 onLoad={() => console.log(\"Image loaded successfully\")} // Log when the image is loaded\n//                 onError={() => console.error(\"Image loading error\")} // Log if there's an error loading the image\n//               />\n//             )}\n//             <div>\n//               <button onClick={() => handleLikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n//                 {/* Thumbs up icon */}\n//                 <span>{likeCounts[post.id]}</span> {/* Display like count */}\n//               </button>\n//               <button onClick={() => handleDislikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n//                 {/* Thumbs down icon */}\n//                 <span>{dislikeCounts[post.id]}</span>{\" \"}\n//                 {/* Display dislike count */}\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Blog;\nimport React, { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport axios from \"axios\";\nimport \"./Blogs.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Blog = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const authToken = localStorage.getItem(\"authToken\"); // Assuming you store the authentication token in local storage\n  const apiBaseUrl = \"http://localhost:3001\"; // Replace with your actual API base URL\n\n  useEffect(() => {\n    axios.get(`${apiBaseUrl}/posts`, {\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n        Accept: \"application/json\"\n      }\n    }).then(async response => {\n      // Initialize the like and dislike counts for each post to 0\n      const postsWithCounts = response.data.map(post => ({\n        ...post,\n        likes_count: 0,\n        dislikes_count: 0\n      }));\n      setPosts(postsWithCounts);\n    }).catch(error => {\n      console.error(\"Error fetching posts:\", error);\n    });\n  }, [authToken, apiBaseUrl]);\n\n  // const handleLikePost = async (postId) => {\n  //   try {\n  //     await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //       },\n  //     });\n\n  //     // Update the like count for the post in the state\n  //     setPosts((prevPosts) =>\n  //       prevPosts.map((post) =>\n  //         post.id === postId\n  //           ? {\n  //               ...post,\n  //               likes_count: post.likes_count + 1,\n  //             }\n  //           : post\n  //       )\n  //     );\n  //   } catch (error) {\n  //     console.error(\"Error liking post:\", error);\n  //   }\n  // };\n  // const handleLikePost = async (postId) => {\n  //   try {\n  //     console.log(\"Liking post...\");\n  //     await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //       },\n  //     });\n\n  //     // Update the like count for the post in the state\n  //     setPosts((prevPosts) =>\n  //       prevPosts.map((post) =>\n  //         post.id === postId\n  //           ? {\n  //               ...post,\n  //               likes_count: post.likes_count + 1,\n  //             }\n  //           : post\n  //       )\n  //     );\n\n  //     console.log(\"Post liked successfully\");\n  //   } catch (error) {\n  //     console.error(\"Error liking post:\", error);\n  //   }\n  // };\n  const handleLikePost = async postId => {\n    try {\n      await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n\n      // Fetch the updated like count and update the state\n      const response = await axios.get(`${apiBaseUrl}/posts/${postId}/like_dislike_counts`);\n      const updatedLikeCount = response.data.like_count;\n      setPosts(prevPosts => prevPosts.map(post => post.id === postId ? {\n        ...post,\n        likes_count: updatedLikeCount\n      } : post));\n      console.log(\"Post liked successfully\");\n    } catch (error) {\n      console.error(\"Error liking post:\", error);\n    }\n  };\n\n  // const handleDislikePost = async (postId) => {\n  //   try {\n  //     await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //       },\n  //     });\n\n  //     // Update the dislike count for the post in the state\n  //     setPosts((prevPosts) =>\n  //       prevPosts.map((post) =>\n  //         post.id === postId\n  //           ? {\n  //               ...post,\n  //               dislikes_count: post.dislikes_count + 1,\n  //             }\n  //           : post\n  //       )\n  //     );\n  //   } catch (error) {\n  //     console.error(\"Error disliking post:\", error);\n  //   }\n  // };\n  const handleDislikePost = async postId => {\n    try {\n      await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n\n      // Fetch the updated dislike count and update the state\n      const response = await axios.get(`${apiBaseUrl}/posts/${postId}/like_dislike_counts`);\n      const updatedDislikeCount = response.data.dislike_count;\n      setPosts(prevPosts => prevPosts.map(post => post.id === postId ? {\n        ...post,\n        dislikes_count: updatedDislikeCount\n      } : post));\n      console.log(\"Post disliked successfully\");\n    } catch (error) {\n      console.error(\"Error disliking post:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blog\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Latest Blog Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"post-title\",\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"post-author\",\n          children: [\"By \", post.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-content\",\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }, this), post.image_url && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${apiBaseUrl}${post.image_url}` // Use the absolute image URL\n          ,\n          alt: post.title // Set an appropriate alt text\n          ,\n          className: \"post-image\",\n          onLoad: () => console.log(\"Image loaded successfully\") // Log when the image is loaded\n          ,\n          onError: () => console.error(\"Image loading error\") // Log if there's an error loading the image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleLikePost(post.id),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-thumbs-up thumbs-up-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 348,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: post.likes_count\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 349,\n              columnNumber: 17\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDislikePost(post.id),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-thumbs-down thumbs-down-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: post.dislikes_count\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 354,\n              columnNumber: 17\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 329,\n    columnNumber: 5\n  }, this);\n};\n_s(Blog, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = Blog;\nexport default Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Blog","_s","posts","setPosts","authToken","localStorage","getItem","apiBaseUrl","get","headers","Authorization","Accept","then","response","postsWithCounts","data","map","post","likes_count","dislikes_count","catch","error","console","handleLikePost","postId","updatedLikeCount","like_count","prevPosts","id","log","handleDislikePost","updatedDislikeCount","dislike_count","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","title","author","content","image_url","src","alt","onLoad","onError","onClick","_c","$RefreshReg$"],"sources":["/home/markpaul/projects/Blog-client/src/components/Blogs/Blogs.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"font-awesome/css/font-awesome.min.css\";\n\n// import axios from \"axios\";\n// import \"./Blogs.css\";\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const authToken = localStorage.getItem(\"authToken\"); // Assuming you store the authentication token in local storage\n//   const apiBaseUrl = \"http://localhost:3001\"; // Replace with your actual API base URL\n\n//   // Initialize like and dislike counts as objects with default values of 0\n//   const [likeCounts, setLikeCounts] = useState({});\n//   const [dislikeCounts, setDislikeCounts] = useState({});\n\n//   useEffect(() => {\n//     axios\n//       .get(`${apiBaseUrl}/posts`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//           Accept: \"application/json\",\n//         },\n//       })\n//       .then(async (response) => {\n//         setPosts(response.data);\n\n//         // Fetch like and dislike counts for each post\n//         const postPromises = response.data.map(async (post) => {\n//           try {\n//             const countsResponse = await axios.get(\n//               `${apiBaseUrl}/posts/${post.id}/like_dislike_counts`,\n//               {\n//                 headers: {\n//                   Authorization: `Bearer ${authToken}`,\n//                   Accept: \"application/json\",\n//                 },\n//               }\n//             );\n\n//             const { likes_count, dislikes_count } = countsResponse.data;\n//             const initialLikeCounts = {};\n//             const initialDislikeCounts = {};\n\n//             response.data.forEach((post) => {\n//               initialLikeCounts[post.id] = 0;\n//               initialDislikeCounts[post.id] = 0;\n\n//               // ...\n//             });\n//             // Update like and dislike counts in state for the specific post\n//             setLikeCounts((prevCounts) => ({\n//               ...prevCounts,\n//               [post.id]: likes_count,\n//             }));\n//             setDislikeCounts((prevCounts) => ({\n//               ...prevCounts,\n//               [post.id]: dislikes_count,\n//             }));\n\n//             // Attach like and dislike counts to the post object\n//             return { ...post, likes_count, dislikes_count };\n//           } catch (error) {\n//             console.error(\"Error fetching like/dislike counts:\", error);\n//             return post; // Return the original post if there was an error\n//           }\n//         });\n\n//         // Wait for all promises to resolve\n//         const postsWithCounts = await Promise.all(postPromises);\n\n//         // Update the state with posts including like and dislike counts\n//         setPosts(postsWithCounts);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching posts:\", error);\n//       });\n//   }, [authToken, apiBaseUrl]);\n//   const handleLikePost = (postId) => {\n//     axios\n//       .post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//       .then((response) => {\n//         // Handle success, e.g., update the UI to reflect the liked post\n//         console.log(\"Post liked successfully\");\n//         // Increment the like count for the post\n//         setLikeCounts((prevCounts) => ({\n//           ...prevCounts,\n//           [postId]: prevCounts[postId] + 1,\n//         }));\n//       })\n//       .catch((error) => {\n//         console.error(\"Error liking post:\", error);\n//       });\n//   };\n\n//   const handleDislikePost = (postId) => {\n//     axios\n//       .post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       })\n//       .then((response) => {\n//         // Handle success, e.g., update the UI to reflect the disliked post\n//         console.log(\"Post disliked successfully\");\n//         // Increment the dislike count for the post\n//         setDislikeCounts((prevCounts) => ({\n//           ...prevCounts,\n//           [postId]: prevCounts[postId] + 1,\n//         }));\n//       })\n//       .catch((error) => {\n//         console.error(\"Error disliking post:\", error);\n//       });\n//   };\n\n//   return (\n//     <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div key={index} className=\"post\">\n//             <h3 className=\"post-title\">{post.title}</h3>\n//             <p className=\"post-author\">By {post.author}</p>\n//             <div className=\"post-content\">{post.content}</div>\n//             {post.image_url && (\n//               <img\n//                 src={`${apiBaseUrl}${post.image_url}`} // Use the absolute image URL\n//                 alt={post.title} // Set an appropriate alt text\n//                 className=\"post-image\"\n//                 onLoad={() => console.log(\"Image loaded successfully\")} // Log when the image is loaded\n//                 onError={() => console.error(\"Image loading error\")} // Log if there's an error loading the image\n//               />\n//             )}\n//             <div>\n//               <button onClick={() => handleLikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n//                 {/* Thumbs up icon */}\n//                 <span>{likeCounts[post.id]}</span> {/* Display like count */}\n//               </button>\n//               <button onClick={() => handleDislikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n//                 {/* Thumbs down icon */}\n//                 <span>{dislikeCounts[post.id]}</span>{\" \"}\n//                 {/* Display dislike count */}\n//               </button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Blog;\nimport React, { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nimport axios from \"axios\";\nimport \"./Blogs.css\";\n\nconst Blog = () => {\n  const [posts, setPosts] = useState([]);\n  const authToken = localStorage.getItem(\"authToken\"); // Assuming you store the authentication token in local storage\n  const apiBaseUrl = \"http://localhost:3001\"; // Replace with your actual API base URL\n\n  useEffect(() => {\n    axios\n      .get(`${apiBaseUrl}/posts`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          Accept: \"application/json\",\n        },\n      })\n      .then(async (response) => {\n        // Initialize the like and dislike counts for each post to 0\n        const postsWithCounts = response.data.map((post) => ({\n          ...post,\n          likes_count: 0,\n          dislikes_count: 0,\n        }));\n\n        setPosts(postsWithCounts);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching posts:\", error);\n      });\n  }, [authToken, apiBaseUrl]);\n\n  // const handleLikePost = async (postId) => {\n  //   try {\n  //     await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //       },\n  //     });\n\n  //     // Update the like count for the post in the state\n  //     setPosts((prevPosts) =>\n  //       prevPosts.map((post) =>\n  //         post.id === postId\n  //           ? {\n  //               ...post,\n  //               likes_count: post.likes_count + 1,\n  //             }\n  //           : post\n  //       )\n  //     );\n  //   } catch (error) {\n  //     console.error(\"Error liking post:\", error);\n  //   }\n  // };\n  // const handleLikePost = async (postId) => {\n  //   try {\n  //     console.log(\"Liking post...\");\n  //     await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //       },\n  //     });\n\n  //     // Update the like count for the post in the state\n  //     setPosts((prevPosts) =>\n  //       prevPosts.map((post) =>\n  //         post.id === postId\n  //           ? {\n  //               ...post,\n  //               likes_count: post.likes_count + 1,\n  //             }\n  //           : post\n  //       )\n  //     );\n\n  //     console.log(\"Post liked successfully\");\n  //   } catch (error) {\n  //     console.error(\"Error liking post:\", error);\n  //   }\n  // };\n  const handleLikePost = async (postId) => {\n    try {\n      await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      // Fetch the updated like count and update the state\n      const response = await axios.get(\n        `${apiBaseUrl}/posts/${postId}/like_dislike_counts`\n      );\n      const updatedLikeCount = response.data.like_count;\n\n      setPosts((prevPosts) =>\n        prevPosts.map((post) =>\n          post.id === postId\n            ? {\n                ...post,\n                likes_count: updatedLikeCount,\n              }\n            : post\n        )\n      );\n\n      console.log(\"Post liked successfully\");\n    } catch (error) {\n      console.error(\"Error liking post:\", error);\n    }\n  };\n\n  // const handleDislikePost = async (postId) => {\n  //   try {\n  //     await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //       },\n  //     });\n\n  //     // Update the dislike count for the post in the state\n  //     setPosts((prevPosts) =>\n  //       prevPosts.map((post) =>\n  //         post.id === postId\n  //           ? {\n  //               ...post,\n  //               dislikes_count: post.dislikes_count + 1,\n  //             }\n  //           : post\n  //       )\n  //     );\n  //   } catch (error) {\n  //     console.error(\"Error disliking post:\", error);\n  //   }\n  // };\n  const handleDislikePost = async (postId) => {\n    try {\n      await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n  \n      // Fetch the updated dislike count and update the state\n      const response = await axios.get(\n        `${apiBaseUrl}/posts/${postId}/like_dislike_counts`\n      );\n      const updatedDislikeCount = response.data.dislike_count;\n  \n      setPosts((prevPosts) =>\n        prevPosts.map((post) =>\n          post.id === postId\n            ? {\n                ...post,\n                dislikes_count: updatedDislikeCount,\n              }\n            : post\n        )\n      );\n  \n      console.log(\"Post disliked successfully\");\n    } catch (error) {\n      console.error(\"Error disliking post:\", error);\n    }\n  };\n  \n\n  return (\n    <div className=\"blog\">\n      <h2>Latest Blog Posts</h2>\n      <div className=\"post-list\">\n        {posts.map((post, index) => (\n          <div key={index} className=\"post\">\n            <h3 className=\"post-title\">{post.title}</h3>\n            <p className=\"post-author\">By {post.author}</p>\n            <div className=\"post-content\">{post.content}</div>\n            {post.image_url && (\n              <img\n                src={`${apiBaseUrl}${post.image_url}`} // Use the absolute image URL\n                alt={post.title} // Set an appropriate alt text\n                className=\"post-image\"\n                onLoad={() => console.log(\"Image loaded successfully\")} // Log when the image is loaded\n                onError={() => console.error(\"Image loading error\")} // Log if there's an error loading the image\n              />\n            )}\n            <div>\n              <button onClick={() => handleLikePost(post.id)}>\n                <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n                <span>{post.likes_count}</span> {/* Display like count */}\n              </button>\n              <button onClick={() => handleDislikePost(post.id)}>\n                <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n                {/* Thumbs down icon */}\n                <span>{post.dislikes_count}</span> {/* Display dislike count */}\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Blog;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,uCAAuC;AAE9C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMS,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;EACrD,MAAMC,UAAU,GAAG,uBAAuB,CAAC,CAAC;;EAE5CX,SAAS,CAAC,MAAM;IACdC,KAAK,CACFW,GAAG,CAAE,GAAED,UAAW,QAAO,EAAE;MAC1BE,OAAO,EAAE;QACPC,aAAa,EAAG,UAASN,SAAU,EA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}