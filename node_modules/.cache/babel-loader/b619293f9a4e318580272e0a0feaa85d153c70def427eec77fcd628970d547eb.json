{"ast":null,"code":"var _jsxFileName = \"/home/markpaul/projects/Blog/client/src/components/Blogs/Blogs.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import 'font-awesome/css/font-awesome.min.css';\n\n// import axios from 'axios';\n// import './Blogs.css';\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const authToken = localStorage.getItem('authToken'); // Assuming you store the authentication token in local storage\n//   const apiBaseUrl = 'http://localhost:3001'; // Replace with your actual API base URL\n\n//   useEffect(() => {\n//     axios.get(`${apiBaseUrl}/posts`, {\n//       headers: {\n//         Authorization: `Bearer ${authToken}`,\n//         Accept: 'application/json', // Specify JSON as the expected response\n//       },\n//     })\n//     .then(response => {\n//       console.log('API Response Data:', response.data); // Log the entire response for debugging\n//       setPosts(response.data);\n//     })\n//     .catch(error => {\n//       console.error('Error fetching posts:', error);\n//     });\n//   }, [authToken, apiBaseUrl]);\n\n//   const handleLikePost = (postId) => {\n//     axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//       headers: {\n//         Authorization: `Bearer ${authToken}`,\n//       },\n//     })\n//     .then(response => {\n//       // Handle success, e.g., update the UI to reflect the liked post\n//     })\n//     .catch(error => {\n//       console.error('Error liking post:', error);\n//     });\n//   };\n\n//   // Function to handle disliking a post\n//   const handleDislikePost = (postId) => {\n//     axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//       headers: {\n//         Authorization: `Bearer ${authToken}`,\n//       },\n//     })\n//     .then(response => {\n//       // Handle success, e.g., update the UI to reflect the disliked post\n//     })\n//     .catch(error => {\n//       console.error('Error disliking post:', error);\n//     });\n//   };\n\n//   return (\n\n//   <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div key={index} className=\"post\">\n//             <h3 className=\"post-title\">{post.title}</h3>\n//             <p className=\"post-author\">By {post.author}</p>\n//             <div className=\"post-content\">{post.content}</div>\n//             {post.image_url && (\n//               <img\n//                 src={`${apiBaseUrl}${post.image_url}`} // Use the absolute image URL\n//                 alt={post.title} // Set an appropriate alt text\n//                 className=\"post-image\"\n//                 onLoad={() => console.log('Image loaded successfully')} // Log when the image is loaded\n//                 onError={() => console.error('Image loading error')} // Log if there's an error loading the image\n//               />\n//             )}\n//             <button onClick={() => handleLikePost(post.id)}>\n//               {/* <i className=\"fa fa-thumbs-up\"></i>  */}\n//               <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>\n//               {/* Thumbs up icon */}\n//             </button>\n//             <button onClick={() => handleDislikePost(post.id)}>\n//               {/* <i className=\"fa fa-thumbs-down\"></i>  */}\n//               <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>\n//               {/* Thumbs down icon */}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n\n// };\n\n// export default Blog;\n\n// import React, { useState, useEffect } from 'react';\n// import 'font-awesome/css/font-awesome.min.css';\n\n// import axios from 'axios';\n// import './Blogs.css';\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const authToken = localStorage.getItem('authToken'); // Assuming you store the authentication token in local storage\n//   const apiBaseUrl = 'http://localhost:3001'; // Replace with your actual API base URL\n\n//   useEffect(() => {\n//     axios.get(`${apiBaseUrl}/posts`, {\n//       headers: {\n//         Authorization: `Bearer ${authToken}`,\n//         Accept: 'application/json', // Specify JSON as the expected response\n//       },\n//     })\n//     .then(response => {\n//       console.log('API Response Data:', response.data); // Log the entire response for debugging\n//       setPosts(response.data);\n//     })\n//     .catch(error => {\n//       console.error('Error fetching posts:', error);\n//     });\n//   }, [authToken, apiBaseUrl]);\n\n//   const handleLikePost = (postId) => {\n//     axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//       headers: {\n//         Authorization: `Bearer ${authToken}`,\n//       },\n//     })\n//     .then(response => {\n//       // Handle success, e.g., update the UI to reflect the liked post\n//       console.log('Post liked successfully');\n//     })\n//     .catch(error => {\n//       console.error('Error liking post:', error);\n//     });\n//   };\n\n//   const handleDislikePost = (postId) => {\n//     axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//       headers: {\n//         Authorization: `Bearer ${authToken}`,\n//       },\n//     })\n//     .then(response => {\n//       // Handle success, e.g., update the UI to reflect the disliked post\n//       console.log('Post disliked successfully');\n//     })\n//     .catch(error => {\n//       console.error('Error disliking post:', error);\n//     });\n//   };\n\n//   return (\n//     <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div key={index} className=\"post\">\n//             <h3 className=\"post-title\">{post.title}</h3>\n//             <p className=\"post-author\">By {post.author}</p>\n//             <div className=\"post-content\">{post.content}</div>\n//             {post.image_url && (\n//               <img\n//                 src={`${apiBaseUrl}${post.image_url}`} // Use the absolute image URL\n//                 alt={post.title} // Set an appropriate alt text\n//                 className=\"post-image\"\n//                 onLoad={() => console.log('Image loaded successfully')} // Log when the image is loaded\n//                 onError={() => console.error('Image loading error')} // Log if there's an error loading the image\n//               />\n//             )}\n//             <button onClick={() => handleLikePost(post.id)}>\n//               <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i> {/* Thumbs up icon */}\n//             </button>\n//             <button onClick={() => handleDislikePost(post.id)}>\n//               <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i> {/* Thumbs down icon */}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Blog;\nimport React, { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport axios from \"axios\";\nimport \"./Blogs.css\";\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const authToken = localStorage.getItem(\"authToken\"); // Assuming you store the authentication token in local storage\n//   const apiBaseUrl = \"http://localhost:3001\"; // Replace with your actual API base URL\n\n//   // State to store like and dislike counts for each post\n//   const [likeCounts, setLikeCounts] = useState({});\n//   const [dislikeCounts, setDislikeCounts] = useState({});\n\n//   // useEffect(() => {\n//   //   axios\n//   //     .get(`${apiBaseUrl}/posts`, {\n//   //       headers: {\n//   //         Authorization: `Bearer ${authToken}`,\n//   //         Accept: \"application/json\",\n//   //       },\n//   //     })\n//   //     .then((response) => {\n//   //       setPosts(response.data);\n\n//   //       // Fetch like and dislike counts for each post\n//   //       response.data.forEach((post) => {\n//   //         axios\n//   //           .get(`${apiBaseUrl}/posts/${post.id}/like_dislike_counts`, {\n//   //             headers: {\n//   //               Authorization: `Bearer ${authToken}`,\n//   //               Accept: \"application/json\",\n//   //             },\n//   //           })\n//   //           .then((countsResponse) => {\n//   //             const { likes_count, dislikes_count } = countsResponse.data;\n\n//   //             // Update like and dislike counts in state for the specific post\n//   //             setLikeCounts((prevCounts) => ({\n//   //               ...prevCounts,\n//   //               [post.id]: likes_count,\n//   //             }));\n//   //             setDislikeCounts((prevCounts) => ({\n//   //               ...prevCounts,\n//   //               [post.id]: dislikes_count,\n//   //             }));\n//   //           })\n//   //           .catch((error) => {\n//   //             console.error(\"Error fetching like/dislike counts:\", error);\n//   //           });\n//   //       });\n//   //     })\n//   //     .catch((error) => {\n//   //       console.error(\"Error fetching posts:\", error);\n//   //     });\n//   // }, [authToken, apiBaseUrl]);\n\n//   // ...\n//   useEffect(() => {\n//     axios\n//       .get(`${apiBaseUrl}/posts`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//           Accept: \"application/json\",\n//         },\n//       })\n//       .then((response) => {\n//         setPosts(response.data);\n\n//         // Initialize like and dislike counts with default values for each post\n//         const initialLikeCounts = {};\n//         const initialDislikeCounts = {};\n\n//         response.data.forEach((post) => {\n//           initialLikeCounts[post.id] = 0;\n//           initialDislikeCounts[post.id] = 0;\n\n//           // ...\n//         });\n\n//         setLikeCounts(initialLikeCounts);\n//         setDislikeCounts(initialDislikeCounts);\n\n//         // ...\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching posts:\", error);\n//       });\n//   }, [authToken, apiBaseUrl]);\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Blog = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [likeCounts, setLikeCounts] = useState({}); // Define likeCounts state\n  const [dislikeCounts, setDislikeCounts] = useState({}); // Define dislikeCounts state\n  const authToken = localStorage.getItem(\"authToken\"); // Assuming you store the authentication token in local storage\n  const apiBaseUrl = \"http://localhost:3001\"; // Replace with your actual API base URL\n\n  useEffect(() => {\n    axios.get(`${apiBaseUrl}/posts`, {\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n        Accept: \"application/json\"\n      }\n    }).then(async response => {\n      setPosts(response.data);\n\n      // Fetch like and dislike counts for each post\n      const postPromises = response.data.map(async post => {\n        try {\n          const countsResponse = await axios.get(`${apiBaseUrl}/posts/${post.id}/like_dislike_counts`, {\n            headers: {\n              Authorization: `Bearer ${authToken}`,\n              Accept: \"application/json\"\n            }\n          });\n          const {\n            likes_count,\n            dislikes_count\n          } = countsResponse.data;\n\n          // Attach like and dislike counts to the post object\n          return {\n            ...post,\n            likes_count,\n            dislikes_count\n          };\n        } catch (error) {\n          console.error(\"Error fetching like/dislike counts:\", error);\n          return post; // Return the original post if there was an error\n        }\n      });\n\n      // Wait for all promises to resolve\n      const postsWithCounts = await Promise.all(postPromises);\n\n      // Update the state with posts including like and dislike counts\n      setPosts(postsWithCounts);\n    }).catch(error => {\n      console.error(\"Error fetching posts:\", error);\n    });\n  }, [authToken, apiBaseUrl]);\n  const handleLikePost = postId => {\n    axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    }).then(response => {\n      // Handle success, e.g., update the UI to reflect the liked post\n      console.log(\"Post liked successfully\");\n      // Increment the like count for the post\n      setLikeCounts(prevCounts => ({\n        ...prevCounts,\n        [postId]: prevCounts[postId] + 1\n      }));\n    }).catch(error => {\n      console.error(\"Error liking post:\", error);\n    });\n  };\n  const handleDislikePost = postId => {\n    axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    }).then(response => {\n      // Handle success, e.g., update the UI to reflect the disliked post\n      console.log(\"Post disliked successfully\");\n      // Increment the dislike count for the post\n      setDislikeCounts(prevCounts => ({\n        ...prevCounts,\n        [postId]: prevCounts[postId] + 1\n      }));\n    }).catch(error => {\n      console.error(\"Error disliking post:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blog\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Latest Blog Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"post-title\",\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"post-author\",\n          children: [\"By \", post.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-content\",\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 13\n        }, this), post.image_url && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${apiBaseUrl}${post.image_url}` // Use the absolute image URL\n          ,\n          alt: post.title // Set an appropriate alt text\n          ,\n          className: \"post-image\",\n          onLoad: () => console.log(\"Image loaded successfully\") // Log when the image is loaded\n          ,\n          onError: () => console.error(\"Image loading error\") // Log if there's an error loading the image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 378,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleLikePost(post.id),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-thumbs-up thumbs-up-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: likeCounts[post.id]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 390,\n              columnNumber: 17\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDislikePost(post.id),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-thumbs-down thumbs-down-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 393,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: dislikeCounts[post.id]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 17\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 386,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 369,\n    columnNumber: 5\n  }, this);\n};\n_s(Blog, \"0D/V62dy8RLy3kuIPhAnV4OnGuY=\");\n_c = Blog;\nexport default Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Blog","_s","posts","setPosts","likeCounts","setLikeCounts","dislikeCounts","setDislikeCounts","authToken","localStorage","getItem","apiBaseUrl","get","headers","Authorization","Accept","then","response","data","postPromises","map","post","countsResponse","id","likes_count","dislikes_count","error","console","postsWithCounts","Promise","all","catch","handleLikePost","postId","log","prevCounts","handleDislikePost","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","title","author","content","image_url","src","alt","onLoad","onError","onClick","_c","$RefreshReg$"],"sources":["/home/markpaul/projects/Blog/client/src/components/Blogs/Blogs.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import 'font-awesome/css/font-awesome.min.css';\n\n// import axios from 'axios';\n// import './Blogs.css';\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const authToken = localStorage.getItem('authToken'); // Assuming you store the authentication token in local storage\n//   const apiBaseUrl = 'http://localhost:3001'; // Replace with your actual API base URL\n\n//   useEffect(() => {\n//     axios.get(`${apiBaseUrl}/posts`, {\n//       headers: {\n//         Authorization: `Bearer ${authToken}`,\n//         Accept: 'application/json', // Specify JSON as the expected response\n//       },\n//     })\n//     .then(response => {\n//       console.log('API Response Data:', response.data); // Log the entire response for debugging\n//       setPosts(response.data);\n//     })\n//     .catch(error => {\n//       console.error('Error fetching posts:', error);\n//     });\n//   }, [authToken, apiBaseUrl]);\n\n//   const handleLikePost = (postId) => {\n//     axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//       headers: {\n//         Authorization: `Bearer ${authToken}`,\n//       },\n//     })\n//     .then(response => {\n//       // Handle success, e.g., update the UI to reflect the liked post\n//     })\n//     .catch(error => {\n//       console.error('Error liking post:', error);\n//     });\n//   };\n\n//   // Function to handle disliking a post\n//   const handleDislikePost = (postId) => {\n//     axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//       headers: {\n//         Authorization: `Bearer ${authToken}`,\n//       },\n//     })\n//     .then(response => {\n//       // Handle success, e.g., update the UI to reflect the disliked post\n//     })\n//     .catch(error => {\n//       console.error('Error disliking post:', error);\n//     });\n//   };\n\n//   return (\n\n//   <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div key={index} className=\"post\">\n//             <h3 className=\"post-title\">{post.title}</h3>\n//             <p className=\"post-author\">By {post.author}</p>\n//             <div className=\"post-content\">{post.content}</div>\n//             {post.image_url && (\n//               <img\n//                 src={`${apiBaseUrl}${post.image_url}`} // Use the absolute image URL\n//                 alt={post.title} // Set an appropriate alt text\n//                 className=\"post-image\"\n//                 onLoad={() => console.log('Image loaded successfully')} // Log when the image is loaded\n//                 onError={() => console.error('Image loading error')} // Log if there's an error loading the image\n//               />\n//             )}\n//             <button onClick={() => handleLikePost(post.id)}>\n//               {/* <i className=\"fa fa-thumbs-up\"></i>  */}\n//               <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>\n//               {/* Thumbs up icon */}\n//             </button>\n//             <button onClick={() => handleDislikePost(post.id)}>\n//               {/* <i className=\"fa fa-thumbs-down\"></i>  */}\n//               <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>\n//               {/* Thumbs down icon */}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n\n// };\n\n// export default Blog;\n\n// import React, { useState, useEffect } from 'react';\n// import 'font-awesome/css/font-awesome.min.css';\n\n// import axios from 'axios';\n// import './Blogs.css';\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const authToken = localStorage.getItem('authToken'); // Assuming you store the authentication token in local storage\n//   const apiBaseUrl = 'http://localhost:3001'; // Replace with your actual API base URL\n\n//   useEffect(() => {\n//     axios.get(`${apiBaseUrl}/posts`, {\n//       headers: {\n//         Authorization: `Bearer ${authToken}`,\n//         Accept: 'application/json', // Specify JSON as the expected response\n//       },\n//     })\n//     .then(response => {\n//       console.log('API Response Data:', response.data); // Log the entire response for debugging\n//       setPosts(response.data);\n//     })\n//     .catch(error => {\n//       console.error('Error fetching posts:', error);\n//     });\n//   }, [authToken, apiBaseUrl]);\n\n//   const handleLikePost = (postId) => {\n//     axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//       headers: {\n//         Authorization: `Bearer ${authToken}`,\n//       },\n//     })\n//     .then(response => {\n//       // Handle success, e.g., update the UI to reflect the liked post\n//       console.log('Post liked successfully');\n//     })\n//     .catch(error => {\n//       console.error('Error liking post:', error);\n//     });\n//   };\n\n//   const handleDislikePost = (postId) => {\n//     axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//       headers: {\n//         Authorization: `Bearer ${authToken}`,\n//       },\n//     })\n//     .then(response => {\n//       // Handle success, e.g., update the UI to reflect the disliked post\n//       console.log('Post disliked successfully');\n//     })\n//     .catch(error => {\n//       console.error('Error disliking post:', error);\n//     });\n//   };\n\n//   return (\n//     <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div key={index} className=\"post\">\n//             <h3 className=\"post-title\">{post.title}</h3>\n//             <p className=\"post-author\">By {post.author}</p>\n//             <div className=\"post-content\">{post.content}</div>\n//             {post.image_url && (\n//               <img\n//                 src={`${apiBaseUrl}${post.image_url}`} // Use the absolute image URL\n//                 alt={post.title} // Set an appropriate alt text\n//                 className=\"post-image\"\n//                 onLoad={() => console.log('Image loaded successfully')} // Log when the image is loaded\n//                 onError={() => console.error('Image loading error')} // Log if there's an error loading the image\n//               />\n//             )}\n//             <button onClick={() => handleLikePost(post.id)}>\n//               <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i> {/* Thumbs up icon */}\n//             </button>\n//             <button onClick={() => handleDislikePost(post.id)}>\n//               <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i> {/* Thumbs down icon */}\n//             </button>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Blog;\nimport React, { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nimport axios from \"axios\";\nimport \"./Blogs.css\";\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const authToken = localStorage.getItem(\"authToken\"); // Assuming you store the authentication token in local storage\n//   const apiBaseUrl = \"http://localhost:3001\"; // Replace with your actual API base URL\n\n//   // State to store like and dislike counts for each post\n//   const [likeCounts, setLikeCounts] = useState({});\n//   const [dislikeCounts, setDislikeCounts] = useState({});\n\n//   // useEffect(() => {\n//   //   axios\n//   //     .get(`${apiBaseUrl}/posts`, {\n//   //       headers: {\n//   //         Authorization: `Bearer ${authToken}`,\n//   //         Accept: \"application/json\",\n//   //       },\n//   //     })\n//   //     .then((response) => {\n//   //       setPosts(response.data);\n\n//   //       // Fetch like and dislike counts for each post\n//   //       response.data.forEach((post) => {\n//   //         axios\n//   //           .get(`${apiBaseUrl}/posts/${post.id}/like_dislike_counts`, {\n//   //             headers: {\n//   //               Authorization: `Bearer ${authToken}`,\n//   //               Accept: \"application/json\",\n//   //             },\n//   //           })\n//   //           .then((countsResponse) => {\n//   //             const { likes_count, dislikes_count } = countsResponse.data;\n\n//   //             // Update like and dislike counts in state for the specific post\n//   //             setLikeCounts((prevCounts) => ({\n//   //               ...prevCounts,\n//   //               [post.id]: likes_count,\n//   //             }));\n//   //             setDislikeCounts((prevCounts) => ({\n//   //               ...prevCounts,\n//   //               [post.id]: dislikes_count,\n//   //             }));\n//   //           })\n//   //           .catch((error) => {\n//   //             console.error(\"Error fetching like/dislike counts:\", error);\n//   //           });\n//   //       });\n//   //     })\n//   //     .catch((error) => {\n//   //       console.error(\"Error fetching posts:\", error);\n//   //     });\n//   // }, [authToken, apiBaseUrl]);\n\n//   // ...\n//   useEffect(() => {\n//     axios\n//       .get(`${apiBaseUrl}/posts`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//           Accept: \"application/json\",\n//         },\n//       })\n//       .then((response) => {\n//         setPosts(response.data);\n\n//         // Initialize like and dislike counts with default values for each post\n//         const initialLikeCounts = {};\n//         const initialDislikeCounts = {};\n\n//         response.data.forEach((post) => {\n//           initialLikeCounts[post.id] = 0;\n//           initialDislikeCounts[post.id] = 0;\n\n//           // ...\n//         });\n\n//         setLikeCounts(initialLikeCounts);\n//         setDislikeCounts(initialDislikeCounts);\n\n//         // ...\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching posts:\", error);\n//       });\n//   }, [authToken, apiBaseUrl]);\nconst Blog = () => {\n  const [posts, setPosts] = useState([]);\n  const [likeCounts, setLikeCounts] = useState({}); // Define likeCounts state\n  const [dislikeCounts, setDislikeCounts] = useState({}); // Define dislikeCounts state\n  const authToken = localStorage.getItem(\"authToken\"); // Assuming you store the authentication token in local storage\n  const apiBaseUrl = \"http://localhost:3001\"; // Replace with your actual API base URL\n\n  useEffect(() => {\n    axios\n      .get(`${apiBaseUrl}/posts`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          Accept: \"application/json\",\n        },\n      })\n      .then(async (response) => {\n        setPosts(response.data);\n\n        // Fetch like and dislike counts for each post\n        const postPromises = response.data.map(async (post) => {\n          try {\n            const countsResponse = await axios.get(\n              `${apiBaseUrl}/posts/${post.id}/like_dislike_counts`,\n              {\n                headers: {\n                  Authorization: `Bearer ${authToken}`,\n                  Accept: \"application/json\",\n                },\n              }\n            );\n\n            const { likes_count, dislikes_count } = countsResponse.data;\n\n            // Attach like and dislike counts to the post object\n            return { ...post, likes_count, dislikes_count };\n          } catch (error) {\n            console.error(\"Error fetching like/dislike counts:\", error);\n            return post; // Return the original post if there was an error\n          }\n        });\n\n        // Wait for all promises to resolve\n        const postsWithCounts = await Promise.all(postPromises);\n\n        // Update the state with posts including like and dislike counts\n        setPosts(postsWithCounts);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching posts:\", error);\n      });\n  }, [authToken, apiBaseUrl]);\n  const handleLikePost = (postId) => {\n    axios\n      .post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      })\n      .then((response) => {\n        // Handle success, e.g., update the UI to reflect the liked post\n        console.log(\"Post liked successfully\");\n        // Increment the like count for the post\n        setLikeCounts((prevCounts) => ({\n          ...prevCounts,\n          [postId]: prevCounts[postId] + 1,\n        }));\n      })\n      .catch((error) => {\n        console.error(\"Error liking post:\", error);\n      });\n  };\n\n  const handleDislikePost = (postId) => {\n    axios\n      .post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      })\n      .then((response) => {\n        // Handle success, e.g., update the UI to reflect the disliked post\n        console.log(\"Post disliked successfully\");\n        // Increment the dislike count for the post\n        setDislikeCounts((prevCounts) => ({\n          ...prevCounts,\n          [postId]: prevCounts[postId] + 1,\n        }));\n      })\n      .catch((error) => {\n        console.error(\"Error disliking post:\", error);\n      });\n  };\n\n  return (\n    <div className=\"blog\">\n      <h2>Latest Blog Posts</h2>\n      <div className=\"post-list\">\n        {posts.map((post, index) => (\n          <div key={index} className=\"post\">\n            <h3 className=\"post-title\">{post.title}</h3>\n            <p className=\"post-author\">By {post.author}</p>\n            <div className=\"post-content\">{post.content}</div>\n            {post.image_url && (\n              <img\n                src={`${apiBaseUrl}${post.image_url}`} // Use the absolute image URL\n                alt={post.title} // Set an appropriate alt text\n                className=\"post-image\"\n                onLoad={() => console.log(\"Image loaded successfully\")} // Log when the image is loaded\n                onError={() => console.error(\"Image loading error\")} // Log if there's an error loading the image\n              />\n            )}\n            <div>\n              <button onClick={() => handleLikePost(post.id)}>\n                <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n                {/* Thumbs up icon */}\n                <span>{likeCounts[post.id]}</span> {/* Display like count */}\n              </button>\n              <button onClick={() => handleDislikePost(post.id)}>\n                <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n                {/* Thumbs down icon */}\n                <span>{dislikeCounts[post.id]}</span>{\" \"}\n                {/* Display dislike count */}\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Blog;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,uCAAuC;AAE9C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A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"},"metadata":{},"sourceType":"module","externalDependencies":[]}