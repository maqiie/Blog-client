{"ast":null,"code":"var _jsxFileName = \"/home/markpaul/projects/Blog/client/src/components/Blogs/Blogs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport axios from \"axios\";\nimport \"./Blogs.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Blog = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const authToken = localStorage.getItem(\"authToken\"); // Assuming you store the authentication token in local storage\n  const apiBaseUrl = \"http://localhost:3001\"; // Replace with your actual API base URL\n\n  // Initialize like and dislike counts as objects with default values of 0\n  const [likeCounts, setLikeCounts] = useState({});\n  const [dislikeCounts, setDislikeCounts] = useState({});\n\n  // useEffect(() => {\n  //   axios\n  //     .get(`${apiBaseUrl}/posts`, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //         Accept: \"application/json\",\n  //       },\n  //     })\n  //     .then(async (response) => {\n  //       setPosts(response.data);\n\n  //       // Fetch like and dislike counts for each post\n  //       const postPromises = response.data.map(async (post) => {\n  //         try {\n  //           const countsResponse = await axios.get(\n  //             `${apiBaseUrl}/posts/${post.id}/like_dislike_counts`,\n  //             {\n  //               headers: {\n  //                 Authorization: `Bearer ${authToken}`,\n  //                 Accept: \"application/json\",\n  //               },\n  //             }\n  //           );\n\n  //           const { likes_count, dislikes_count } = countsResponse.data;\n  //           const initialLikeCounts = {};\n  //           const initialDislikeCounts = {};\n\n  //           response.data.forEach((post) => {\n  //             initialLikeCounts[post.id] = 0;\n  //             initialDislikeCounts[post.id] = 0;\n\n  //             // ...\n  //           });\n  //           // Update like and dislike counts in state for the specific post\n  //           setLikeCounts((prevCounts) => ({\n  //             ...prevCounts,\n  //             [post.id]: likes_count,\n  //           }));\n  //           setDislikeCounts((prevCounts) => ({\n  //             ...prevCounts,\n  //             [post.id]: dislikes_count,\n  //           }));\n\n  //           // Attach like and dislike counts to the post object\n  //           return { ...post, likes_count, dislikes_count };\n  //         } catch (error) {\n  //           console.error(\"Error fetching like/dislike counts:\", error);\n  //           return post; // Return the original post if there was an error\n  //         }\n  //       });\n\n  //       // Wait for all promises to resolve\n  //       const postsWithCounts = await Promise.all(postPromises);\n\n  //       // Update the state with posts including like and dislike counts\n  //       setPosts(postsWithCounts);\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error fetching posts:\", error);\n  //     });\n  // },\n  // ...\n\n  useEffect(() => {\n    axios.get(`${apiBaseUrl}/posts`, {\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n        Accept: \"application/json\"\n      }\n    }).then(async response => {\n      const fetchedPosts = response.data;\n\n      // Initialize like and dislike counts for all posts with default value 0\n      const initialLikeCounts = {};\n      const initialDislikeCounts = {};\n      fetchedPosts.forEach(post => {\n        initialLikeCounts[post.id] = 0;\n        initialDislikeCounts[post.id] = 0;\n      });\n      setPosts(fetchedPosts);\n      setLikeCounts(initialLikeCounts);\n      setDislikeCounts(initialDislikeCounts);\n\n      // Fetch like and dislike counts for each post\n      const postPromises = fetchedPosts.map(async post => {\n        try {\n          const countsResponse = await axios.get(`${apiBaseUrl}/posts/${post.id}/like_dislike_counts`, {\n            headers: {\n              Authorization: `Bearer ${authToken}`,\n              Accept: \"application/json\"\n            }\n          });\n          // Initialize like and dislike counts for all posts with user action\n          const initialLikeCounts = {};\n          const initialDislikeCounts = {};\n          fetchedPosts.forEach(post => {\n            initialLikeCounts[post.id] = {\n              count: 0,\n              userAction: null\n            };\n            initialDislikeCounts[post.id] = {\n              count: 0,\n              userAction: null\n            };\n          });\n          setPosts(fetchedPosts);\n          setLikeCounts(initialLikeCounts);\n          setDislikeCounts(initialDislikeCounts);\n          const {\n            likes_count,\n            dislikes_count\n          } = countsResponse.data;\n\n          // Update like and dislike counts in state for the specific post\n          setLikeCounts(prevCounts => ({\n            ...prevCounts,\n            [post.id]: likes_count\n          }));\n          setDislikeCounts(prevCounts => ({\n            ...prevCounts,\n            [post.id]: dislikes_count\n          }));\n\n          // Attach like and dislike counts to the post object\n          return {\n            ...post,\n            likes_count,\n            dislikes_count\n          };\n        } catch (error) {\n          console.error(\"Error fetching like/dislike counts:\", error);\n          return post; // Return the original post if there was an error\n        }\n      });\n\n      // Wait for all promises to resolve\n      const postsWithCounts = await Promise.all(postPromises);\n\n      // Update the state with posts including like and dislike counts\n      setPosts(postsWithCounts);\n    }).catch(error => {\n      console.error(\"Error fetching posts:\", error);\n    });\n  }, [authToken, apiBaseUrl]);\n\n  // ...\n  // [authToken, apiBaseUrl]);\n  // const handleLikePost = (postId) => {\n  //   axios\n  //     .post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //       },\n  //     })\n  //     .then((response) => {\n  //       // Handle success, e.g., update the UI to reflect the liked post\n  //       console.log(\"Post liked successfully\");\n  //       // Increment the like count for the post\n  //       setLikeCounts((prevCounts) => ({\n  //         ...prevCounts,\n  //         [postId]: prevCounts[postId] + 1,\n  //       }));\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error liking post:\", error);\n  //     });\n  // };\n  const handleLikePost = postId => {\n    axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    }).then(response => {\n      // Handle success, e.g., update the UI to reflect the liked post\n      console.log(\"Post liked successfully\");\n\n      // Update like count for the post\n      setLikeCounts(prevCounts => ({\n        ...prevCounts,\n        [postId]: {\n          count: prevCounts[postId].count + 1,\n          userAction: \"like\"\n        }\n      }));\n    }).catch(error => {\n      console.error(\"Error liking post:\", error);\n    });\n  };\n  const handleDislikePost = postId => {\n    axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    }).then(response => {\n      // Handle success, e.g., update the UI to reflect the disliked post\n      console.log(\"Post disliked successfully\");\n\n      // Update dislike count for the post\n      setDislikeCounts(prevCounts => ({\n        ...prevCounts,\n        [postId]: {\n          count: prevCounts[postId].count + 1,\n          userAction: \"dislike\"\n        }\n      }));\n    }).catch(error => {\n      console.error(\"Error disliking post:\", error);\n    });\n  };\n\n  // const handleDislikePost = (postId) => {\n  //   axios\n  //     .post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //       },\n  //     })\n  //     .then((response) => {\n  //       // Handle success, e.g., update the UI to reflect the disliked post\n  //       console.log(\"Post disliked successfully\");\n  //       // Increment the dislike count for the post\n  //       setDislikeCounts((prevCounts) => ({\n  //         ...prevCounts,\n  //         [postId]: prevCounts[postId] + 1,\n  //       }));\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error disliking post:\", error);\n  //     });\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blog\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Latest Blog Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"post-title\",\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"post-author\",\n          children: [\"By \", post.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-content\",\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 13\n        }, this), post.image_url && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${apiBaseUrl}${post.image_url}` // Use the absolute image URL\n          ,\n          alt: post.title // Set an appropriate alt text\n          ,\n          className: \"post-image\",\n          onLoad: () => console.log(\"Image loaded successfully\") // Log when the image is loaded\n          ,\n          onError: () => console.error(\"Image loading error\") // Log if there's an error loading the image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleLikePost(post.id),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: `fa fa-thumbs-up thumbs-up-icon${likeCounts[post.id] && likeCounts[post.id].userAction === \"like\" ? \" active\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: likeCounts[post.id] ? likeCounts[post.id].count : 0\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 276,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDislikePost(post.id),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: `fa fa-thumbs-down thumbs-down-icon${dislikeCounts[post.id].userAction === \"dislike\" ? \" active\" : \"\"}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 282,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: dislikeCounts[post.id].count\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 289,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 281,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 249,\n    columnNumber: 5\n  }, this);\n};\n_s(Blog, \"0D/V62dy8RLy3kuIPhAnV4OnGuY=\");\n_c = Blog;\nexport default Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Blog","_s","posts","setPosts","authToken","localStorage","getItem","apiBaseUrl","likeCounts","setLikeCounts","dislikeCounts","setDislikeCounts","get","headers","Authorization","Accept","then","response","fetchedPosts","data","initialLikeCounts","initialDislikeCounts","forEach","post","id","postPromises","map","countsResponse","count","userAction","likes_count","dislikes_count","prevCounts","error","console","postsWithCounts","Promise","all","catch","handleLikePost","postId","log","handleDislikePost","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","title","author","content","image_url","src","alt","onLoad","onError","onClick","_c","$RefreshReg$"],"sources":["/home/markpaul/projects/Blog/client/src/components/Blogs/Blogs.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nimport axios from \"axios\";\nimport \"./Blogs.css\";\n\nconst Blog = () => {\n  const [posts, setPosts] = useState([]);\n  const authToken = localStorage.getItem(\"authToken\"); // Assuming you store the authentication token in local storage\n  const apiBaseUrl = \"http://localhost:3001\"; // Replace with your actual API base URL\n\n  // Initialize like and dislike counts as objects with default values of 0\n  const [likeCounts, setLikeCounts] = useState({});\n  const [dislikeCounts, setDislikeCounts] = useState({});\n\n  // useEffect(() => {\n  //   axios\n  //     .get(`${apiBaseUrl}/posts`, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //         Accept: \"application/json\",\n  //       },\n  //     })\n  //     .then(async (response) => {\n  //       setPosts(response.data);\n\n  //       // Fetch like and dislike counts for each post\n  //       const postPromises = response.data.map(async (post) => {\n  //         try {\n  //           const countsResponse = await axios.get(\n  //             `${apiBaseUrl}/posts/${post.id}/like_dislike_counts`,\n  //             {\n  //               headers: {\n  //                 Authorization: `Bearer ${authToken}`,\n  //                 Accept: \"application/json\",\n  //               },\n  //             }\n  //           );\n\n  //           const { likes_count, dislikes_count } = countsResponse.data;\n  //           const initialLikeCounts = {};\n  //           const initialDislikeCounts = {};\n\n  //           response.data.forEach((post) => {\n  //             initialLikeCounts[post.id] = 0;\n  //             initialDislikeCounts[post.id] = 0;\n\n  //             // ...\n  //           });\n  //           // Update like and dislike counts in state for the specific post\n  //           setLikeCounts((prevCounts) => ({\n  //             ...prevCounts,\n  //             [post.id]: likes_count,\n  //           }));\n  //           setDislikeCounts((prevCounts) => ({\n  //             ...prevCounts,\n  //             [post.id]: dislikes_count,\n  //           }));\n\n  //           // Attach like and dislike counts to the post object\n  //           return { ...post, likes_count, dislikes_count };\n  //         } catch (error) {\n  //           console.error(\"Error fetching like/dislike counts:\", error);\n  //           return post; // Return the original post if there was an error\n  //         }\n  //       });\n\n  //       // Wait for all promises to resolve\n  //       const postsWithCounts = await Promise.all(postPromises);\n\n  //       // Update the state with posts including like and dislike counts\n  //       setPosts(postsWithCounts);\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error fetching posts:\", error);\n  //     });\n  // },\n  // ...\n\n  useEffect(() => {\n    axios\n      .get(`${apiBaseUrl}/posts`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          Accept: \"application/json\",\n        },\n      })\n      .then(async (response) => {\n        const fetchedPosts = response.data;\n\n        // Initialize like and dislike counts for all posts with default value 0\n        const initialLikeCounts = {};\n        const initialDislikeCounts = {};\n        fetchedPosts.forEach((post) => {\n          initialLikeCounts[post.id] = 0;\n          initialDislikeCounts[post.id] = 0;\n        });\n\n        setPosts(fetchedPosts);\n        setLikeCounts(initialLikeCounts);\n        setDislikeCounts(initialDislikeCounts);\n\n        // Fetch like and dislike counts for each post\n        const postPromises = fetchedPosts.map(async (post) => {\n          try {\n            const countsResponse = await axios.get(\n              `${apiBaseUrl}/posts/${post.id}/like_dislike_counts`,\n              {\n                headers: {\n                  Authorization: `Bearer ${authToken}`,\n                  Accept: \"application/json\",\n                },\n              }\n            );\n            // Initialize like and dislike counts for all posts with user action\n            const initialLikeCounts = {};\n            const initialDislikeCounts = {};\n            fetchedPosts.forEach((post) => {\n              initialLikeCounts[post.id] = { count: 0, userAction: null };\n              initialDislikeCounts[post.id] = { count: 0, userAction: null };\n            });\n\n            setPosts(fetchedPosts);\n            setLikeCounts(initialLikeCounts);\n            setDislikeCounts(initialDislikeCounts);\n\n            const { likes_count, dislikes_count } = countsResponse.data;\n\n            // Update like and dislike counts in state for the specific post\n            setLikeCounts((prevCounts) => ({\n              ...prevCounts,\n              [post.id]: likes_count,\n            }));\n            setDislikeCounts((prevCounts) => ({\n              ...prevCounts,\n              [post.id]: dislikes_count,\n            }));\n\n            // Attach like and dislike counts to the post object\n            return { ...post, likes_count, dislikes_count };\n          } catch (error) {\n            console.error(\"Error fetching like/dislike counts:\", error);\n            return post; // Return the original post if there was an error\n          }\n        });\n\n        // Wait for all promises to resolve\n        const postsWithCounts = await Promise.all(postPromises);\n\n        // Update the state with posts including like and dislike counts\n        setPosts(postsWithCounts);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching posts:\", error);\n      });\n  }, [authToken, apiBaseUrl]);\n\n  // ...\n  // [authToken, apiBaseUrl]);\n  // const handleLikePost = (postId) => {\n  //   axios\n  //     .post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //       },\n  //     })\n  //     .then((response) => {\n  //       // Handle success, e.g., update the UI to reflect the liked post\n  //       console.log(\"Post liked successfully\");\n  //       // Increment the like count for the post\n  //       setLikeCounts((prevCounts) => ({\n  //         ...prevCounts,\n  //         [postId]: prevCounts[postId] + 1,\n  //       }));\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error liking post:\", error);\n  //     });\n  // };\n  const handleLikePost = (postId) => {\n    axios\n      .post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      })\n      .then((response) => {\n        // Handle success, e.g., update the UI to reflect the liked post\n        console.log(\"Post liked successfully\");\n\n        // Update like count for the post\n        setLikeCounts((prevCounts) => ({\n          ...prevCounts,\n          [postId]: { count: prevCounts[postId].count + 1, userAction: \"like\" },\n        }));\n      })\n      .catch((error) => {\n        console.error(\"Error liking post:\", error);\n      });\n  };\n\n  const handleDislikePost = (postId) => {\n    axios\n      .post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      })\n      .then((response) => {\n        // Handle success, e.g., update the UI to reflect the disliked post\n        console.log(\"Post disliked successfully\");\n\n        // Update dislike count for the post\n        setDislikeCounts((prevCounts) => ({\n          ...prevCounts,\n          [postId]: {\n            count: prevCounts[postId].count + 1,\n            userAction: \"dislike\",\n          },\n        }));\n      })\n      .catch((error) => {\n        console.error(\"Error disliking post:\", error);\n      });\n  };\n\n  // const handleDislikePost = (postId) => {\n  //   axios\n  //     .post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //       },\n  //     })\n  //     .then((response) => {\n  //       // Handle success, e.g., update the UI to reflect the disliked post\n  //       console.log(\"Post disliked successfully\");\n  //       // Increment the dislike count for the post\n  //       setDislikeCounts((prevCounts) => ({\n  //         ...prevCounts,\n  //         [postId]: prevCounts[postId] + 1,\n  //       }));\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error disliking post:\", error);\n  //     });\n  // };\n\n  return (\n    <div className=\"blog\">\n      <h2>Latest Blog Posts</h2>\n      <div className=\"post-list\">\n        {posts.map((post, index) => (\n          <div key={index} className=\"post\">\n            <h3 className=\"post-title\">{post.title}</h3>\n            <p className=\"post-author\">By {post.author}</p>\n            <div className=\"post-content\">{post.content}</div>\n            {post.image_url && (\n              <img\n                src={`${apiBaseUrl}${post.image_url}`} // Use the absolute image URL\n                alt={post.title} // Set an appropriate alt text\n                className=\"post-image\"\n                onLoad={() => console.log(\"Image loaded successfully\")} // Log when the image is loaded\n                onError={() => console.error(\"Image loading error\")} // Log if there's an error loading the image\n              />\n            )}\n            <div>\n              <button onClick={() => handleLikePost(post.id)}>\n                <i\n                  className={`fa fa-thumbs-up thumbs-up-icon${\n                    likeCounts[post.id] &&\n                    likeCounts[post.id].userAction === \"like\"\n                      ? \" active\"\n                      : \"\"\n                  }`}\n                ></i>\n                <span>\n                  {likeCounts[post.id] ? likeCounts[post.id].count : 0}\n                </span>\n              </button>\n\n              <button onClick={() => handleDislikePost(post.id)}>\n                <i\n                  className={`fa fa-thumbs-down thumbs-down-icon${\n                    dislikeCounts[post.id].userAction === \"dislike\"\n                      ? \" active\"\n                      : \"\"\n                  }`}\n                ></i>\n                <span>{dislikeCounts[post.id].count}</span>\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Blog;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}