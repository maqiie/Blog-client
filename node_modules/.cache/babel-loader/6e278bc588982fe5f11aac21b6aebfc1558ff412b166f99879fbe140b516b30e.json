{"ast":null,"code":"var _jsxFileName = \"/home/markpaul/projects/Blog-client/src/components/Blogs/Blogs.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"font-awesome/css/font-awesome.min.css\";\n// import axios from \"axios\";\n// import \"./Blogs.css\";\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [expandedPostId, setExpandedPostId] = useState(null); // Track the expanded post\n//   const authToken = localStorage.getItem(\"authToken\");\n//   const apiBaseUrl = \"http://localhost:3001\";\n\n//   useEffect(() => {\n//     // Fetch blog posts with their like and dislike counts\n//     axios\n//       .get(`${apiBaseUrl}/posts`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//           Accept: \"application/json\",\n//         },\n//       })\n//       .then((response) => {\n//         setPosts(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching posts:\", error);\n//       });\n//   }, [authToken, apiBaseUrl]);\n\n//   const handleLikePost = async (postId) => {\n//     try {\n//       // Send a POST request to like the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post liked successfully\");\n\n//       // Fetch the updated like count\n//       const likeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/likes`\n//       ); // Use the new \"likes\" route\n\n//       const updatedLikeCount = likeResponse.data.likesCount;\n\n//       console.log(\"Updated Like Count:\", updatedLikeCount);\n\n//       // Update the UI to reflect the new like count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 likes_count: updatedLikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking post:\", error);\n//     }\n//   };\n\n//   const handleDislikePost = async (postId) => {\n//     try {\n//       // Send a POST request to dislike the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post disliked successfully\");\n\n//       // Fetch the updated dislike count\n//       const dislikeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/dislikes`\n//       ); // Use the new \"dislikes\" route\n\n//       const updatedDislikeCount = dislikeResponse.data.dislikesCount;\n\n//       console.log(\"Updated Dislike Count:\", updatedDislikeCount);\n\n//       // Update the UI to reflect the new dislike count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 dislikes_count: updatedDislikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking post:\", error);\n//     }\n//   }; // Move this closing curly brace to here\n\n//   const handlePostClick = (postId) => {\n//     // Toggle the expanded state of the post\n//     if (postId === expandedPostId) {\n//       // Collapse the post if it's already expanded\n//       setExpandedPostId(null);\n//     } else {\n//       // Expand the clicked post\n//       setExpandedPostId(postId);\n//     }\n//   };\n\n//   return (\n//     <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div\n//             key={index}\n//             className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n//           >\n//             <h3 className=\"post-title\">{post.title}</h3>\n//             <p className=\"post-author\">By {post.author}</p>\n//             <div className=\"post-content\">\n//               {post.id === expandedPostId ? post.content : post.content.slice(0, 200) + '...'}\n//               {/* Display only a portion of content if not expanded */}\n//             </div>\n//             {post.image_url && (\n//               <img\n//                 src={`${apiBaseUrl}${post.image_url}`}\n//                 alt={post.title}\n//                 className=\"post-image\"\n//                 onLoad={() => console.log(\"Image loaded successfully\")}\n//                 onError={() => console.error(\"Image loading error\")}\n//               />\n//             )}\n//             <div>\n//               <button onClick={() => handleLikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n//                 <span>{post.likes_count}</span>\n//               </button>\n//               <button onClick={() => handleDislikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n//                 <span>{post.dislikes_count}</span>\n//               </button>\n//             </div>\n//             {/* Add a \"Read More\" link to expand/collapse the post */}\n//             <div className=\"read-more\" onClick={() => handlePostClick(post.id)}>\n//               {post.id === expandedPostId ? \"Read Less\" : \"Read More\"}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Blog;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"font-awesome/css/font-awesome.min.css\";\n// import axios from \"axios\";\n// import \"./Blogs.css\";\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [expandedPostId, setExpandedPostId] = useState(null);\n//   const [comments, setComments] = useState({});\n//   const [newComment, setNewComment] = useState(\"\");\n//   const authToken = localStorage.getItem(\"authToken\");\n//   const apiBaseUrl = \"http://localhost:3001\";\n\n//   useEffect(() => {\n//     // Fetch blog posts without comments initially\n//     axios\n//       .get(`${apiBaseUrl}/posts`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//           Accept: \"application/json\",\n//         },\n//       })\n//       .then((response) => {\n//         setPosts(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching posts:\", error);\n//       });\n//   }, [authToken, apiBaseUrl]);\n\n//   useEffect(() => {\n//     // Fetch comments when a blog post is expanded\n//     if (expandedPostId !== null) {\n//       axios\n//         .get(`${apiBaseUrl}/posts/${expandedPostId}/comments`, {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             Accept: \"application/json\",\n//           },\n//         })\n//         .then((response) => {\n//           setComments({ ...comments, [expandedPostId]: response.data });\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching comments:\", error);\n//         });\n//     }\n//   }, [expandedPostId, authToken, apiBaseUrl, comments]);\n\n//   const handleLikePost = async (postId) => {\n//     try {\n//       // Send a POST request to like the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post liked successfully\");\n\n//       // Fetch the updated like count\n//       const likeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/likes`\n//       ); // Use the new \"likes\" route\n\n//       const updatedLikeCount = likeResponse.data.likesCount;\n\n//       console.log(\"Updated Like Count:\", updatedLikeCount);\n\n//       // Update the UI to reflect the new like count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 likes_count: updatedLikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking post:\", error);\n//     }\n//   };\n\n//   const handleDislikePost = async (postId) => {\n//     try {\n//       // Send a POST request to dislike the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post disliked successfully\");\n\n//       // Fetch the updated dislike count\n//       const dislikeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/dislikes`\n//       ); // Use the new \"dislikes\" route\n\n//       const updatedDislikeCount = dislikeResponse.data.dislikesCount;\n\n//       console.log(\"Updated Dislike Count:\", updatedDislikeCount);\n\n//       // Update the UI to reflect the new dislike count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 dislikes_count: updatedDislikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking post:\", error);\n//     }\n//   }; // Move this closing curly brace to here\n\n//   const handlePostClick = (postId) => {\n//     // Toggle the expanded state of the post\n//     if (postId === expandedPostId) {\n//       // Collapse the post if it's already expanded\n//       setExpandedPostId(null);\n//     } else {\n//       // Expand the clicked post\n//       setExpandedPostId(postId);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId) => {\n//     try {\n//       // Send a POST request to add a new comment\n//       await axios.post(\n//         `${apiBaseUrl}/posts/${postId}/comments`,\n//         { comment: newComment },\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//         }\n//       );\n\n//       // Fetch updated comments and update the state\n//       const commentResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/comments`,\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             Accept: \"application/json\",\n//           },\n//         }\n//       );\n\n//       setComments({ ...comments, [postId]: commentResponse.data });\n//       setNewComment(\"\"); // Clear the input field after submission\n//     } catch (error) {\n//       console.error(\"Error adding comment:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div\n//             key={index}\n//             className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n//           >\n//             {/* ... (existing code) */}\n//             <div\n//               key={index}\n//               className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n//             >\n//               <h3 className=\"post-title\">{post.title}</h3>\n//               <p className=\"post-author\">By {post.author}</p>\n//               <div className=\"post-content\">\n//                 {post.id === expandedPostId\n//                   ? post.content\n//                   : post.content.slice(0, 200) + \"...\"}\n//                 {/* Display only a portion of content if not expanded */}\n//               </div>\n//               {post.image_url && (\n//                 <img\n//                   src={`${apiBaseUrl}${post.image_url}`}\n//                   alt={post.title}\n//                   className=\"post-image\"\n//                   onLoad={() => console.log(\"Image loaded successfully\")}\n//                   onError={() => console.error(\"Image loading error\")}\n//                 />\n//               )}\n//               <div>\n//                 <button onClick={() => handleLikePost(post.id)}>\n//                   <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n//                   <span>{post.likes_count}</span>\n//                 </button>\n//                 <button onClick={() => handleDislikePost(post.id)}>\n//                   <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n//                   <span>{post.dislikes_count}</span>\n//                 </button>\n//               </div>\n//               {/* Add a \"Read More\" link to expand/collapse the post */}\n//               <div\n//                 className=\"read-more\"\n//                 onClick={() => handlePostClick(post.id)}\n//               >\n//                 {post.id === expandedPostId ? \"Read Less\" : \"Read More\"}\n//               </div>\n//             </div>\n\n//             {/* Display comments section */}\n//             {post.id === expandedPostId && (\n//               <div className=\"comments-section\">\n//                 <h4>Comments:</h4>\n//                 <ul>\n//                   {comments[post.id] &&\n//                     comments[post.id].map((comment, commentIndex) => (\n//                       <li key={commentIndex}>{comment.text}</li>\n//                     ))}\n//                 </ul>\n//                 <div>\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Add a comment...\"\n//                     value={newComment}\n//                     onChange={(e) => setNewComment(e.target.value)}\n//                   />\n//                   <button onClick={() => handleCommentSubmit(post.id)}>\n//                     Add Comment\n//                   </button>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Blog;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"font-awesome/css/font-awesome.min.css\";\n// import axios from \"axios\";\n// import \"./Blogs.css\";\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [expandedPostId, setExpandedPostId] = useState(null); // Track the expanded post\n//   const authToken = localStorage.getItem(\"authToken\");\n//   const apiBaseUrl = \"http://localhost:3001\";\n\n//   // State to store comments for each post\n//   const [comments, setComments] = useState({});\n\n//   // State for the new comment input\n//   const [newComment, setNewComment] = useState(\"\");\n\n//   useEffect(() => {\n//     // Fetch blog posts with their like and dislike counts\n//     axios\n//       .get(`${apiBaseUrl}/posts`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//           Accept: \"application/json\",\n//         },\n//       })\n//       .then((response) => {\n//         setPosts(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching posts:\", error);\n//       });\n//   }, [authToken, apiBaseUrl]);\n\n//   const handleLikePost = async (postId) => {\n//     try {\n//       // Send a POST request to like the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post liked successfully\");\n\n//       // Fetch the updated like count\n//       const likeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/likes`\n//       ); // Use the new \"likes\" route\n\n//       const updatedLikeCount = likeResponse.data.likesCount;\n\n//       console.log(\"Updated Like Count:\", updatedLikeCount);\n\n//       // Update the UI to reflect the new like count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 likes_count: updatedLikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking post:\", error);\n//     }\n//   };\n\n//   const handleDislikePost = async (postId) => {\n//     try {\n//       // Send a POST request to dislike the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post disliked successfully\");\n\n//       // Fetch the updated dislike count\n//       const dislikeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/dislikes`\n//       ); // Use the new \"dislikes\" route\n\n//       const updatedDislikeCount = dislikeResponse.data.dislikesCount;\n\n//       console.log(\"Updated Dislike Count:\", updatedDislikeCount);\n\n//       // Update the UI to reflect the new dislike count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 dislikes_count: updatedDislikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking post:\", error);\n//     }\n//   };\n\n//   const handlePostClick = (postId) => {\n//     // Toggle the expanded state of the post\n//     if (postId === expandedPostId) {\n//       // Collapse the post if it's already expanded\n//       setExpandedPostId(null);\n//     } else {\n//       // Expand the clicked post\n//       setExpandedPostId(postId);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId) => {\n//     try {\n//       // Send a POST request to add a new comment\n//       await axios.post(\n//         `${apiBaseUrl}/posts/${postId}/comments`,\n//         { comment: newComment },\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//         }\n//       );\n\n//       // Fetch updated comments and update the state\n//       const commentResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/comments`,\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             Accept: \"application/json\",\n//           },\n//         }\n//       );\n\n//       setComments({ ...comments, [postId]: commentResponse.data });\n//       setNewComment(\"\"); // Clear the input field after submission\n//     } catch (error) {\n//       console.error(\"Error adding comment:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div\n//             key={index}\n//             className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n//           >\n//             <h3 className=\"post-title\">{post.title}</h3>\n//             <p className=\"post-author\">By {post.author}</p>\n//             <div className=\"post-content\">\n//               {post.id === expandedPostId\n//                 ? post.content\n//                 : post.content.slice(0, 200) + \"...\"}\n//               {/* Display only a portion of content if not expanded */}\n//             </div>\n//             {post.image_url && (\n//               <img\n//                 src={`${apiBaseUrl}${post.image_url}`}\n//                 alt={post.title}\n//                 className=\"post-image\"\n//                 onLoad={() => console.log(\"Image loaded successfully\")}\n//                 onError={() => console.error(\"Image loading error\")}\n//               />\n//             )}\n//             <div>\n//               <button onClick={() => handleLikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n//                 <span>{post.likes_count}</span>\n//               </button>\n//               <button onClick={() => handleDislikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n//                 <span>{post.dislikes_count}</span>\n//               </button>\n//             </div>\n//             {/* Add a \"Read More\" link to expand/collapse the post */}\n//             <div className=\"read-more\" onClick={() => handlePostClick(post.id)}>\n//               {post.id === expandedPostId ? \"Read Less\" : \"Read More\"}\n//             </div>\n\n//             {/* Display comments section */}\n//             {post.id === expandedPostId && (\n//               <div className=\"comments-section\">\n//                 <h4>Comments:</h4>\n//                 <ul>\n//                   {comments[post.id] &&\n//                     comments[post.id].map((comment, commentIndex) => (\n//                       <li key={commentIndex}>{comment.text}</li>\n//                     ))}\n//                 </ul>\n//                 {/* Add a form to submit new comments */}\n//                 <div>\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Add a comment...\"\n//                     value={newComment} // Bind the input value to the newComment state\n//                     onChange={(e) => setNewComment(e.target.value)} // Handle input changes\n//                   />\n//                   {/* <button onClick={() => handleCommentSubmit(post.id)}>\n//                     Add Comment\n//                   </button> */}\n//                   <button class=\"bookmarkBtn\" onClick={() => handleCommentSubmit(post.id)}>\n//                     <span class=\"IconContainer2\">\n//                       <svg fill=\"white\" viewBox=\"0 0 512 512\" height=\"1em\">\n//                         <path d=\"M123.6 391.3c12.9-9.4 29.6-11.8 44.6-6.4c26.5 9.6 56.2 15.1 87.8 15.1c124.7 0 208-80.5 208-160s-83.3-160-208-160S48 160.5 48 240c0 32 12.4 62.8 35.7 89.2c8.6 9.7 12.8 22.5 11.8 35.5c-1.4 18.1-5.7 34.7-11.3 49.4c17-7.9 31.1-16.7 39.4-22.7zM21.2 431.9c1.8-2.7 3.5-5.4 5.1-8.1c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208s-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6c-15.1 6.6-32.3 12.6-50.1 16.1c-.8 .2-1.6 .3-2.4 .5c-4.4 .8-8.7 1.5-13.2 1.9c-.2 0-.5 .1-.7 .1c-5.1 .5-10.2 .8-15.3 .8c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4c4.1-4.2 7.8-8.7 11.3-13.5c1.7-2.3 3.3-4.6 4.8-6.9c.1-.2 .2-.3 .3-.5z\"></path>\n//                       </svg>\n//                     </span>\n//                     <p class=\"text\">Comment</p>\n//                   </button>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Blog;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport axios from \"axios\";\nimport \"./Blogs.css\";\n\n// Define the Comment component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comment = ({\n  comment\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comment-main-level\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-avatar\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: comment.avatar,\n          alt: comment.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 649,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 648,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comment-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-head\",\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            className: \"comment-name by-author\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: comment.authorLink,\n              children: comment.author\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 655,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 654,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: comment.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 657,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-reply\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 658,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n            className: \"fa fa-heart\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 659,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comment-content\",\n          children: comment.text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 661,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 645,\n    columnNumber: 5\n  }, this);\n};\n_c = Comment;\nconst Blog = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [expandedPostId, setExpandedPostId] = useState(null); // Track the expanded post\n  const authToken = localStorage.getItem(\"authToken\");\n  const apiBaseUrl = \"http://localhost:3001\";\n\n  // State to store comments for each post\n  const [comments, setComments] = useState({});\n\n  // State for the new comment input\n  const [newComment, setNewComment] = useState(\"\");\n  useEffect(() => {\n    // Fetch blog posts with their like and dislike counts\n    axios.get(`${apiBaseUrl}/posts`, {\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n        Accept: \"application/json\"\n      }\n    }).then(response => {\n      setPosts(response.data);\n    }).catch(error => {\n      console.error(\"Error fetching posts:\", error);\n    });\n  }, [authToken, apiBaseUrl]);\n  const handleLikePost = async postId => {\n    // ... (existing code)\n  };\n  const handleDislikePost = async postId => {\n    // ... (existing code)\n  };\n  const handlePostClick = postId => {\n    // ... (existing code)\n  };\n  const handleCommentSubmit = async postId => {\n    try {\n      // Send a POST request to add a new comment\n      await axios.post(`${apiBaseUrl}/posts/${postId}/comments`, {\n        comment: newComment\n      }, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      // Fetch updated comments and update the state\n      const commentResponse = await axios.get(`${apiBaseUrl}/posts/${postId}/comments`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          Accept: \"application/json\"\n        }\n      });\n      setComments({\n        ...comments,\n        [postId]: commentResponse.data\n      });\n      setNewComment(\"\"); // Clear the input field after submission\n    } catch (error) {\n      console.error(\"Error adding comment:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blog\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Latest Blog Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 743,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `post ${post.id === expandedPostId ? \"expanded\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"post-title\",\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 750,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"post-author\",\n          children: [\"By \", post.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 751,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-content\",\n          children: post.id === expandedPostId ? post.content : post.content.slice(0, 200) + \"...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 752,\n          columnNumber: 13\n        }, this), post.image_url && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${apiBaseUrl}${post.image_url}`,\n          alt: post.title,\n          className: \"post-image\",\n          onLoad: () => console.log(\"Image loaded successfully\"),\n          onError: () => console.error(\"Image loading error\")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 759,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleLikePost(post.id),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-thumbs-up thumbs-up-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 769,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: post.likes_count\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 770,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDislikePost(post.id),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-thumbs-down thumbs-down-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 773,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: post.dislikes_count\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 774,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 772,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"read-more\",\n          onClick: () => handlePostClick(post.id),\n          children: post.id === expandedPostId ? \"Read Less\" : \"Read More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 778,\n          columnNumber: 13\n        }, this), post.id === expandedPostId && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Comments:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 788,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"comments-list\",\n            children: comments[post.id] && comments[post.id].map((comment, commentIndex) => /*#__PURE__*/_jsxDEV(Comment, {\n              comment: comment\n            }, commentIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 792,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 789,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              placeholder: \"Add a comment...\",\n              value: newComment // Bind the input value to the newComment state\n              ,\n              onChange: e => setNewComment(e.target.value) // Handle input changes\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 797,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              class: \"bookmarkBtn\",\n              onClick: () => handleCommentSubmit(post.id),\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                class: \"IconContainer2\",\n                children: /*#__PURE__*/_jsxDEV(\"svg\", {\n                  fill: \"white\",\n                  viewBox: \"0 0 512 512\",\n                  height: \"1em\",\n                  children: /*#__PURE__*/_jsxDEV(\"path\", {\n                    d: \"M123.6 391.3c12.9-9.4 29.6-11.8 44.6-6.4c26.5 9.6 56.2 15.1 87.8 15.1c124.7 0 208-80.5 208-160s-83.3-160-208-160S48 160.5 48 240c0 32 12.4 62.8 35.7 89.2c8.6 9.7 12.8 22.5 11.8 35.5c-1.4 18.1-5.7 34.7-11.3 49.4c17-7.9 31.1-16.7 39.4-22.7zM21.2 431.9c1.8-2.7 3.5-5.4 5.1-8.1c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208s-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6c-15.1 6.6-32.3 12.6-50.1 16.1c-.8 .2-1.6 .3-2.4 .5c-4.4 .8-8.7 1.5-13.2 1.9c-.2 0-.5 .1-.7 .1c-5.1 .5-10.2 .8-15.3 .8c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4c-4.1-4.2 7.8-8.7 11.3-13.5c1.7-2.3 3.3-4.6 4.8-6.9c.1-.2 .2-.3 .3-.5z\",\n                    fill: \"white\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 809,\n                    columnNumber: 25\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 808,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 807,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                class: \"text\",\n                children: \"Comment\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 815,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 803,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 796,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 787,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 746,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 744,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 742,\n    columnNumber: 5\n  }, this);\n};\n_s(Blog, \"/ZoLW6rCQF7n3w4QSo74fBfzc7o=\");\n_c2 = Blog;\nexport default Blog;\nvar _c, _c2;\n$RefreshReg$(_c, \"Comment\");\n$RefreshReg$(_c2, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Comment","comment","children","className","src","avatar","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","href","authorLink","author","timestamp","text","_c","Blog","_s","posts","setPosts","expandedPostId","setExpandedPostId","authToken","localStorage","getItem","apiBaseUrl","comments","setComments","newComment","setNewComment","get","headers","Authorization","Accept","then","response","data","catch","error","console","handleLikePost","postId","handleDislikePost","handlePostClick","handleCommentSubmit","post","commentResponse","map","index","id","title","content","slice","image_url","onLoad","log","onError","onClick","likes_count","dislikes_count","commentIndex","type","placeholder","value","onChange","e","target","class","fill","viewBox","height","d","_c2","$RefreshReg$"],"sources":["/home/markpaul/projects/Blog-client/src/components/Blogs/Blogs.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"font-awesome/css/font-awesome.min.css\";\n// import axios from \"axios\";\n// import \"./Blogs.css\";\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [expandedPostId, setExpandedPostId] = useState(null); // Track the expanded post\n//   const authToken = localStorage.getItem(\"authToken\");\n//   const apiBaseUrl = \"http://localhost:3001\";\n\n//   useEffect(() => {\n//     // Fetch blog posts with their like and dislike counts\n//     axios\n//       .get(`${apiBaseUrl}/posts`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//           Accept: \"application/json\",\n//         },\n//       })\n//       .then((response) => {\n//         setPosts(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching posts:\", error);\n//       });\n//   }, [authToken, apiBaseUrl]);\n\n//   const handleLikePost = async (postId) => {\n//     try {\n//       // Send a POST request to like the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post liked successfully\");\n\n//       // Fetch the updated like count\n//       const likeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/likes`\n//       ); // Use the new \"likes\" route\n\n//       const updatedLikeCount = likeResponse.data.likesCount;\n\n//       console.log(\"Updated Like Count:\", updatedLikeCount);\n\n//       // Update the UI to reflect the new like count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 likes_count: updatedLikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking post:\", error);\n//     }\n//   };\n\n//   const handleDislikePost = async (postId) => {\n//     try {\n//       // Send a POST request to dislike the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post disliked successfully\");\n\n//       // Fetch the updated dislike count\n//       const dislikeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/dislikes`\n//       ); // Use the new \"dislikes\" route\n\n//       const updatedDislikeCount = dislikeResponse.data.dislikesCount;\n\n//       console.log(\"Updated Dislike Count:\", updatedDislikeCount);\n\n//       // Update the UI to reflect the new dislike count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 dislikes_count: updatedDislikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking post:\", error);\n//     }\n//   }; // Move this closing curly brace to here\n\n//   const handlePostClick = (postId) => {\n//     // Toggle the expanded state of the post\n//     if (postId === expandedPostId) {\n//       // Collapse the post if it's already expanded\n//       setExpandedPostId(null);\n//     } else {\n//       // Expand the clicked post\n//       setExpandedPostId(postId);\n//     }\n//   };\n\n//   return (\n//     <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div\n//             key={index}\n//             className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n//           >\n//             <h3 className=\"post-title\">{post.title}</h3>\n//             <p className=\"post-author\">By {post.author}</p>\n//             <div className=\"post-content\">\n//               {post.id === expandedPostId ? post.content : post.content.slice(0, 200) + '...'}\n//               {/* Display only a portion of content if not expanded */}\n//             </div>\n//             {post.image_url && (\n//               <img\n//                 src={`${apiBaseUrl}${post.image_url}`}\n//                 alt={post.title}\n//                 className=\"post-image\"\n//                 onLoad={() => console.log(\"Image loaded successfully\")}\n//                 onError={() => console.error(\"Image loading error\")}\n//               />\n//             )}\n//             <div>\n//               <button onClick={() => handleLikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n//                 <span>{post.likes_count}</span>\n//               </button>\n//               <button onClick={() => handleDislikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n//                 <span>{post.dislikes_count}</span>\n//               </button>\n//             </div>\n//             {/* Add a \"Read More\" link to expand/collapse the post */}\n//             <div className=\"read-more\" onClick={() => handlePostClick(post.id)}>\n//               {post.id === expandedPostId ? \"Read Less\" : \"Read More\"}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Blog;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"font-awesome/css/font-awesome.min.css\";\n// import axios from \"axios\";\n// import \"./Blogs.css\";\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [expandedPostId, setExpandedPostId] = useState(null);\n//   const [comments, setComments] = useState({});\n//   const [newComment, setNewComment] = useState(\"\");\n//   const authToken = localStorage.getItem(\"authToken\");\n//   const apiBaseUrl = \"http://localhost:3001\";\n\n//   useEffect(() => {\n//     // Fetch blog posts without comments initially\n//     axios\n//       .get(`${apiBaseUrl}/posts`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//           Accept: \"application/json\",\n//         },\n//       })\n//       .then((response) => {\n//         setPosts(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching posts:\", error);\n//       });\n//   }, [authToken, apiBaseUrl]);\n\n//   useEffect(() => {\n//     // Fetch comments when a blog post is expanded\n//     if (expandedPostId !== null) {\n//       axios\n//         .get(`${apiBaseUrl}/posts/${expandedPostId}/comments`, {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             Accept: \"application/json\",\n//           },\n//         })\n//         .then((response) => {\n//           setComments({ ...comments, [expandedPostId]: response.data });\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching comments:\", error);\n//         });\n//     }\n//   }, [expandedPostId, authToken, apiBaseUrl, comments]);\n\n//   const handleLikePost = async (postId) => {\n//     try {\n//       // Send a POST request to like the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post liked successfully\");\n\n//       // Fetch the updated like count\n//       const likeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/likes`\n//       ); // Use the new \"likes\" route\n\n//       const updatedLikeCount = likeResponse.data.likesCount;\n\n//       console.log(\"Updated Like Count:\", updatedLikeCount);\n\n//       // Update the UI to reflect the new like count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 likes_count: updatedLikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking post:\", error);\n//     }\n//   };\n\n//   const handleDislikePost = async (postId) => {\n//     try {\n//       // Send a POST request to dislike the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post disliked successfully\");\n\n//       // Fetch the updated dislike count\n//       const dislikeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/dislikes`\n//       ); // Use the new \"dislikes\" route\n\n//       const updatedDislikeCount = dislikeResponse.data.dislikesCount;\n\n//       console.log(\"Updated Dislike Count:\", updatedDislikeCount);\n\n//       // Update the UI to reflect the new dislike count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 dislikes_count: updatedDislikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking post:\", error);\n//     }\n//   }; // Move this closing curly brace to here\n\n//   const handlePostClick = (postId) => {\n//     // Toggle the expanded state of the post\n//     if (postId === expandedPostId) {\n//       // Collapse the post if it's already expanded\n//       setExpandedPostId(null);\n//     } else {\n//       // Expand the clicked post\n//       setExpandedPostId(postId);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId) => {\n//     try {\n//       // Send a POST request to add a new comment\n//       await axios.post(\n//         `${apiBaseUrl}/posts/${postId}/comments`,\n//         { comment: newComment },\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//         }\n//       );\n\n//       // Fetch updated comments and update the state\n//       const commentResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/comments`,\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             Accept: \"application/json\",\n//           },\n//         }\n//       );\n\n//       setComments({ ...comments, [postId]: commentResponse.data });\n//       setNewComment(\"\"); // Clear the input field after submission\n//     } catch (error) {\n//       console.error(\"Error adding comment:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div\n//             key={index}\n//             className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n//           >\n//             {/* ... (existing code) */}\n//             <div\n//               key={index}\n//               className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n//             >\n//               <h3 className=\"post-title\">{post.title}</h3>\n//               <p className=\"post-author\">By {post.author}</p>\n//               <div className=\"post-content\">\n//                 {post.id === expandedPostId\n//                   ? post.content\n//                   : post.content.slice(0, 200) + \"...\"}\n//                 {/* Display only a portion of content if not expanded */}\n//               </div>\n//               {post.image_url && (\n//                 <img\n//                   src={`${apiBaseUrl}${post.image_url}`}\n//                   alt={post.title}\n//                   className=\"post-image\"\n//                   onLoad={() => console.log(\"Image loaded successfully\")}\n//                   onError={() => console.error(\"Image loading error\")}\n//                 />\n//               )}\n//               <div>\n//                 <button onClick={() => handleLikePost(post.id)}>\n//                   <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n//                   <span>{post.likes_count}</span>\n//                 </button>\n//                 <button onClick={() => handleDislikePost(post.id)}>\n//                   <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n//                   <span>{post.dislikes_count}</span>\n//                 </button>\n//               </div>\n//               {/* Add a \"Read More\" link to expand/collapse the post */}\n//               <div\n//                 className=\"read-more\"\n//                 onClick={() => handlePostClick(post.id)}\n//               >\n//                 {post.id === expandedPostId ? \"Read Less\" : \"Read More\"}\n//               </div>\n//             </div>\n\n//             {/* Display comments section */}\n//             {post.id === expandedPostId && (\n//               <div className=\"comments-section\">\n//                 <h4>Comments:</h4>\n//                 <ul>\n//                   {comments[post.id] &&\n//                     comments[post.id].map((comment, commentIndex) => (\n//                       <li key={commentIndex}>{comment.text}</li>\n//                     ))}\n//                 </ul>\n//                 <div>\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Add a comment...\"\n//                     value={newComment}\n//                     onChange={(e) => setNewComment(e.target.value)}\n//                   />\n//                   <button onClick={() => handleCommentSubmit(post.id)}>\n//                     Add Comment\n//                   </button>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Blog;\n\n// import React, { useState, useEffect } from \"react\";\n// import \"font-awesome/css/font-awesome.min.css\";\n// import axios from \"axios\";\n// import \"./Blogs.css\";\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [expandedPostId, setExpandedPostId] = useState(null); // Track the expanded post\n//   const authToken = localStorage.getItem(\"authToken\");\n//   const apiBaseUrl = \"http://localhost:3001\";\n\n//   // State to store comments for each post\n//   const [comments, setComments] = useState({});\n\n//   // State for the new comment input\n//   const [newComment, setNewComment] = useState(\"\");\n\n//   useEffect(() => {\n//     // Fetch blog posts with their like and dislike counts\n//     axios\n//       .get(`${apiBaseUrl}/posts`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//           Accept: \"application/json\",\n//         },\n//       })\n//       .then((response) => {\n//         setPosts(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching posts:\", error);\n//       });\n//   }, [authToken, apiBaseUrl]);\n\n//   const handleLikePost = async (postId) => {\n//     try {\n//       // Send a POST request to like the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post liked successfully\");\n\n//       // Fetch the updated like count\n//       const likeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/likes`\n//       ); // Use the new \"likes\" route\n\n//       const updatedLikeCount = likeResponse.data.likesCount;\n\n//       console.log(\"Updated Like Count:\", updatedLikeCount);\n\n//       // Update the UI to reflect the new like count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 likes_count: updatedLikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking post:\", error);\n//     }\n//   };\n\n//   const handleDislikePost = async (postId) => {\n//     try {\n//       // Send a POST request to dislike the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post disliked successfully\");\n\n//       // Fetch the updated dislike count\n//       const dislikeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/dislikes`\n//       ); // Use the new \"dislikes\" route\n\n//       const updatedDislikeCount = dislikeResponse.data.dislikesCount;\n\n//       console.log(\"Updated Dislike Count:\", updatedDislikeCount);\n\n//       // Update the UI to reflect the new dislike count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 dislikes_count: updatedDislikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking post:\", error);\n//     }\n//   };\n\n//   const handlePostClick = (postId) => {\n//     // Toggle the expanded state of the post\n//     if (postId === expandedPostId) {\n//       // Collapse the post if it's already expanded\n//       setExpandedPostId(null);\n//     } else {\n//       // Expand the clicked post\n//       setExpandedPostId(postId);\n//     }\n//   };\n\n//   const handleCommentSubmit = async (postId) => {\n//     try {\n//       // Send a POST request to add a new comment\n//       await axios.post(\n//         `${apiBaseUrl}/posts/${postId}/comments`,\n//         { comment: newComment },\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             \"Content-Type\": \"application/json\",\n//           },\n//         }\n//       );\n\n//       // Fetch updated comments and update the state\n//       const commentResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/comments`,\n//         {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//             Accept: \"application/json\",\n//           },\n//         }\n//       );\n\n//       setComments({ ...comments, [postId]: commentResponse.data });\n//       setNewComment(\"\"); // Clear the input field after submission\n//     } catch (error) {\n//       console.error(\"Error adding comment:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div\n//             key={index}\n//             className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n//           >\n//             <h3 className=\"post-title\">{post.title}</h3>\n//             <p className=\"post-author\">By {post.author}</p>\n//             <div className=\"post-content\">\n//               {post.id === expandedPostId\n//                 ? post.content\n//                 : post.content.slice(0, 200) + \"...\"}\n//               {/* Display only a portion of content if not expanded */}\n//             </div>\n//             {post.image_url && (\n//               <img\n//                 src={`${apiBaseUrl}${post.image_url}`}\n//                 alt={post.title}\n//                 className=\"post-image\"\n//                 onLoad={() => console.log(\"Image loaded successfully\")}\n//                 onError={() => console.error(\"Image loading error\")}\n//               />\n//             )}\n//             <div>\n//               <button onClick={() => handleLikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n//                 <span>{post.likes_count}</span>\n//               </button>\n//               <button onClick={() => handleDislikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n//                 <span>{post.dislikes_count}</span>\n//               </button>\n//             </div>\n//             {/* Add a \"Read More\" link to expand/collapse the post */}\n//             <div className=\"read-more\" onClick={() => handlePostClick(post.id)}>\n//               {post.id === expandedPostId ? \"Read Less\" : \"Read More\"}\n//             </div>\n\n//             {/* Display comments section */}\n//             {post.id === expandedPostId && (\n//               <div className=\"comments-section\">\n//                 <h4>Comments:</h4>\n//                 <ul>\n//                   {comments[post.id] &&\n//                     comments[post.id].map((comment, commentIndex) => (\n//                       <li key={commentIndex}>{comment.text}</li>\n//                     ))}\n//                 </ul>\n//                 {/* Add a form to submit new comments */}\n//                 <div>\n//                   <input\n//                     type=\"text\"\n//                     placeholder=\"Add a comment...\"\n//                     value={newComment} // Bind the input value to the newComment state\n//                     onChange={(e) => setNewComment(e.target.value)} // Handle input changes\n//                   />\n//                   {/* <button onClick={() => handleCommentSubmit(post.id)}>\n//                     Add Comment\n//                   </button> */}\n//                   <button class=\"bookmarkBtn\" onClick={() => handleCommentSubmit(post.id)}>\n//                     <span class=\"IconContainer2\">\n//                       <svg fill=\"white\" viewBox=\"0 0 512 512\" height=\"1em\">\n//                         <path d=\"M123.6 391.3c12.9-9.4 29.6-11.8 44.6-6.4c26.5 9.6 56.2 15.1 87.8 15.1c124.7 0 208-80.5 208-160s-83.3-160-208-160S48 160.5 48 240c0 32 12.4 62.8 35.7 89.2c8.6 9.7 12.8 22.5 11.8 35.5c-1.4 18.1-5.7 34.7-11.3 49.4c17-7.9 31.1-16.7 39.4-22.7zM21.2 431.9c1.8-2.7 3.5-5.4 5.1-8.1c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208s-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6c-15.1 6.6-32.3 12.6-50.1 16.1c-.8 .2-1.6 .3-2.4 .5c-4.4 .8-8.7 1.5-13.2 1.9c-.2 0-.5 .1-.7 .1c-5.1 .5-10.2 .8-15.3 .8c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4c4.1-4.2 7.8-8.7 11.3-13.5c1.7-2.3 3.3-4.6 4.8-6.9c.1-.2 .2-.3 .3-.5z\"></path>\n//                       </svg>\n//                     </span>\n//                     <p class=\"text\">Comment</p>\n//                   </button>\n//                 </div>\n//               </div>\n//             )}\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Blog;\n\n\nimport React, { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport axios from \"axios\";\nimport \"./Blogs.css\";\n\n// Define the Comment component\nconst Comment = ({ comment }) => {\n  return (\n    <li>\n      <div className=\"comment-main-level\">\n        {/* Avatar */}\n        <div className=\"comment-avatar\">\n          <img src={comment.avatar} alt={comment.name} />\n        </div>\n        {/* Contenedor del Comentario */}\n        <div className=\"comment-box\">\n          <div className=\"comment-head\">\n            <h6 className=\"comment-name by-author\">\n              <a href={comment.authorLink}>{comment.author}</a>\n            </h6>\n            <span>{comment.timestamp}</span>\n            <i className=\"fa fa-reply\"></i>\n            <i className=\"fa fa-heart\"></i>\n          </div>\n          <div className=\"comment-content\">{comment.text}</div>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nconst Blog = () => {\n  const [posts, setPosts] = useState([]);\n  const [expandedPostId, setExpandedPostId] = useState(null); // Track the expanded post\n  const authToken = localStorage.getItem(\"authToken\");\n  const apiBaseUrl = \"http://localhost:3001\";\n\n  // State to store comments for each post\n  const [comments, setComments] = useState({});\n\n  // State for the new comment input\n  const [newComment, setNewComment] = useState(\"\");\n\n  useEffect(() => {\n    // Fetch blog posts with their like and dislike counts\n    axios\n      .get(`${apiBaseUrl}/posts`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          Accept: \"application/json\",\n        },\n      })\n      .then((response) => {\n        setPosts(response.data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching posts:\", error);\n      });\n  }, [authToken, apiBaseUrl]);\n\n  const handleLikePost = async (postId) => {\n    // ... (existing code)\n  };\n\n  const handleDislikePost = async (postId) => {\n    // ... (existing code)\n  };\n\n  const handlePostClick = (postId) => {\n    // ... (existing code)\n  };\n\n  const handleCommentSubmit = async (postId) => {\n    try {\n      // Send a POST request to add a new comment\n      await axios.post(\n        `${apiBaseUrl}/posts/${postId}/comments`,\n        { comment: newComment },\n        {\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      // Fetch updated comments and update the state\n      const commentResponse = await axios.get(\n        `${apiBaseUrl}/posts/${postId}/comments`,\n        {\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n            Accept: \"application/json\",\n          },\n        }\n      );\n\n      setComments({ ...comments, [postId]: commentResponse.data });\n      setNewComment(\"\"); // Clear the input field after submission\n    } catch (error) {\n      console.error(\"Error adding comment:\", error);\n    }\n  };\n\n  return (\n    <div className=\"blog\">\n      <h2>Latest Blog Posts</h2>\n      <div className=\"post-list\">\n        {posts.map((post, index) => (\n          <div\n            key={index}\n            className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n          >\n            <h3 className=\"post-title\">{post.title}</h3>\n            <p className=\"post-author\">By {post.author}</p>\n            <div className=\"post-content\">\n              {post.id === expandedPostId\n                ? post.content\n                : post.content.slice(0, 200) + \"...\"}\n              {/* Display only a portion of content if not expanded */}\n            </div>\n            {post.image_url && (\n              <img\n                src={`${apiBaseUrl}${post.image_url}`}\n                alt={post.title}\n                className=\"post-image\"\n                onLoad={() => console.log(\"Image loaded successfully\")}\n                onError={() => console.error(\"Image loading error\")}\n              />\n            )}\n            <div>\n              <button onClick={() => handleLikePost(post.id)}>\n                <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n                <span>{post.likes_count}</span>\n              </button>\n              <button onClick={() => handleDislikePost(post.id)}>\n                <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n                <span>{post.dislikes_count}</span>\n              </button>\n            </div>\n            {/* Add a \"Read More\" link to expand/collapse the post */}\n            <div\n              className=\"read-more\"\n              onClick={() => handlePostClick(post.id)}\n            >\n              {post.id === expandedPostId ? \"Read Less\" : \"Read More\"}\n            </div>\n\n            {/* Display comments section */}\n            {post.id === expandedPostId && (\n              <div className=\"comments-section\">\n                <h4>Comments:</h4>\n                <ul className=\"comments-list\">\n                  {comments[post.id] &&\n                    comments[post.id].map((comment, commentIndex) => (\n                      <Comment key={commentIndex} comment={comment} />\n                    ))}\n                </ul>\n                {/* Add a form to submit new comments */}\n                <div>\n                  <input\n                    type=\"text\"\n                    placeholder=\"Add a comment...\"\n                    value={newComment} // Bind the input value to the newComment state\n                    onChange={(e) => setNewComment(e.target.value)} // Handle input changes\n                  />\n                  <button\n                    class=\"bookmarkBtn\"\n                    onClick={() => handleCommentSubmit(post.id)}\n                  >\n                    <span class=\"IconContainer2\">\n                      <svg fill=\"white\" viewBox=\"0 0 512 512\" height=\"1em\">\n                        <path\n                          d=\"M123.6 391.3c12.9-9.4 29.6-11.8 44.6-6.4c26.5 9.6 56.2 15.1 87.8 15.1c124.7 0 208-80.5 208-160s-83.3-160-208-160S48 160.5 48 240c0 32 12.4 62.8 35.7 89.2c8.6 9.7 12.8 22.5 11.8 35.5c-1.4 18.1-5.7 34.7-11.3 49.4c17-7.9 31.1-16.7 39.4-22.7zM21.2 431.9c1.8-2.7 3.5-5.4 5.1-8.1c10-16.6 19.5-38.4 21.4-62.9C17.7 326.8 0 285.1 0 240C0 125.1 114.6 32 256 32s256 93.1 256 208s-114.6 208-256 208c-37.1 0-72.3-6.4-104.1-17.9c-11.9 8.7-31.3 20.6-54.3 30.6c-15.1 6.6-32.3 12.6-50.1 16.1c-.8 .2-1.6 .3-2.4 .5c-4.4 .8-8.7 1.5-13.2 1.9c-.2 0-.5 .1-.7 .1c-5.1 .5-10.2 .8-15.3 .8c-6.5 0-12.3-3.9-14.8-9.9c-2.5-6-1.1-12.8 3.4-17.4c-4.1-4.2 7.8-8.7 11.3-13.5c1.7-2.3 3.3-4.6 4.8-6.9c.1-.2 .2-.3 .3-.5z\"\n                          fill=\"white\"\n                        ></path>\n                      </svg>\n                    </span>\n                    <p class=\"text\">Comment</p>\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Blog;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}