{"ast":null,"code":"var _jsxFileName = \"/home/markpaul/projects/Blog/client/src/components/Blogs/Blogs.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport axios from \"axios\";\nimport \"./Blogs.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Blog = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const authToken = localStorage.getItem(\"authToken\"); // Assuming you store the authentication token in local storage\n  const apiBaseUrl = \"http://localhost:3001\"; // Replace with your actual API base URL\n\n  // Initialize like and dislike counts as objects with default values of 0\n  const [likeCounts, setLikeCounts] = useState({});\n  const [dislikeCounts, setDislikeCounts] = useState({});\n\n  // useEffect(() => {\n  //   axios\n  //     .get(`${apiBaseUrl}/posts`, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //         Accept: \"application/json\",\n  //       },\n  //     })\n  //     .then(async (response) => {\n  //       setPosts(response.data);\n\n  //       // Fetch like and dislike counts for each post\n  //       const postPromises = response.data.map(async (post) => {\n  //         try {\n  //           const countsResponse = await axios.get(\n  //             `${apiBaseUrl}/posts/${post.id}/like_dislike_counts`,\n  //             {\n  //               headers: {\n  //                 Authorization: `Bearer ${authToken}`,\n  //                 Accept: \"application/json\",\n  //               },\n  //             }\n  //           );\n\n  //           const { likes_count, dislikes_count } = countsResponse.data;\n  //           const initialLikeCounts = {};\n  //           const initialDislikeCounts = {};\n\n  //           response.data.forEach((post) => {\n  //             initialLikeCounts[post.id] = 0;\n  //             initialDislikeCounts[post.id] = 0;\n\n  //             // ...\n  //           });\n  //           // Update like and dislike counts in state for the specific post\n  //           setLikeCounts((prevCounts) => ({\n  //             ...prevCounts,\n  //             [post.id]: likes_count,\n  //           }));\n  //           setDislikeCounts((prevCounts) => ({\n  //             ...prevCounts,\n  //             [post.id]: dislikes_count,\n  //           }));\n\n  //           // Attach like and dislike counts to the post object\n  //           return { ...post, likes_count, dislikes_count };\n  //         } catch (error) {\n  //           console.error(\"Error fetching like/dislike counts:\", error);\n  //           return post; // Return the original post if there was an error\n  //         }\n  //       });\n\n  //       // Wait for all promises to resolve\n  //       const postsWithCounts = await Promise.all(postPromises);\n\n  //       // Update the state with posts including like and dislike counts\n  //       setPosts(postsWithCounts);\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error fetching posts:\", error);\n  //     });\n\n  // }, [authToken, apiBaseUrl]);\n  const handleLikePost = postId => {\n    axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    }).then(response => {\n      // Handle success, e.g., update the UI to reflect the liked post\n      console.log(\"Post liked successfully\");\n      // Increment the like count for the post\n      setLikeCounts(prevCounts => ({\n        ...prevCounts,\n        [postId]: prevCounts[postId] + 1\n      }));\n    }).catch(error => {\n      console.error(\"Error liking post:\", error);\n    });\n  };\n  const handleDislikePost = postId => {\n    axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n      headers: {\n        Authorization: `Bearer ${authToken}`\n      }\n    }).then(response => {\n      // Handle success, e.g., update the UI to reflect the disliked post\n      console.log(\"Post disliked successfully\");\n      // Increment the dislike count for the post\n      setDislikeCounts(prevCounts => ({\n        ...prevCounts,\n        [postId]: prevCounts[postId] + 1\n      }));\n    }).catch(error => {\n      console.error(\"Error disliking post:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blog\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Latest Blog Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"post\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"post-title\",\n          children: post.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"post-author\",\n          children: [\"By \", post.author]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"post-content\",\n          children: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 13\n        }, this), post.image_url && /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `${apiBaseUrl}${post.image_url}` // Use the absolute image URL\n          ,\n          alt: post.title // Set an appropriate alt text\n          ,\n          className: \"post-image\",\n          onLoad: () => console.log(\"Image loaded successfully\") // Log when the image is loaded\n          ,\n          onError: () => console.error(\"Image loading error\") // Log if there's an error loading the image\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleLikePost(post.id),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-thumbs-up thumbs-up-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: likeCounts[post.id]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 17\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleDislikePost(post.id),\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"fa fa-thumbs-down thumbs-down-icon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n              children: dislikeCounts[post.id]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 17\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 13\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(Blog, \"BD6OwP8A23gde2rOU9May8FAOOc=\");\n_c = Blog;\nexport default Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Blog","_s","posts","setPosts","authToken","localStorage","getItem","apiBaseUrl","likeCounts","setLikeCounts","dislikeCounts","setDislikeCounts","handleLikePost","postId","post","headers","Authorization","then","response","console","log","prevCounts","catch","error","handleDislikePost","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","title","author","content","image_url","src","alt","onLoad","onError","onClick","id","_c","$RefreshReg$"],"sources":["/home/markpaul/projects/Blog/client/src/components/Blogs/Blogs.js"],"sourcesContent":["\nimport React, { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nimport axios from \"axios\";\nimport \"./Blogs.css\";\n\nconst Blog = () => {\n  const [posts, setPosts] = useState([]);\n  const authToken = localStorage.getItem(\"authToken\"); // Assuming you store the authentication token in local storage\n  const apiBaseUrl = \"http://localhost:3001\"; // Replace with your actual API base URL\n\n  // Initialize like and dislike counts as objects with default values of 0\n  const [likeCounts, setLikeCounts] = useState({});\n  const [dislikeCounts, setDislikeCounts] = useState({});\n\n  // useEffect(() => {\n  //   axios\n  //     .get(`${apiBaseUrl}/posts`, {\n  //       headers: {\n  //         Authorization: `Bearer ${authToken}`,\n  //         Accept: \"application/json\",\n  //       },\n  //     })\n  //     .then(async (response) => {\n  //       setPosts(response.data);\n\n  //       // Fetch like and dislike counts for each post\n  //       const postPromises = response.data.map(async (post) => {\n  //         try {\n  //           const countsResponse = await axios.get(\n  //             `${apiBaseUrl}/posts/${post.id}/like_dislike_counts`,\n  //             {\n  //               headers: {\n  //                 Authorization: `Bearer ${authToken}`,\n  //                 Accept: \"application/json\",\n  //               },\n  //             }\n  //           );\n\n  //           const { likes_count, dislikes_count } = countsResponse.data;\n  //           const initialLikeCounts = {};\n  //           const initialDislikeCounts = {};\n\n  //           response.data.forEach((post) => {\n  //             initialLikeCounts[post.id] = 0;\n  //             initialDislikeCounts[post.id] = 0;\n\n  //             // ...\n  //           });\n  //           // Update like and dislike counts in state for the specific post\n  //           setLikeCounts((prevCounts) => ({\n  //             ...prevCounts,\n  //             [post.id]: likes_count,\n  //           }));\n  //           setDislikeCounts((prevCounts) => ({\n  //             ...prevCounts,\n  //             [post.id]: dislikes_count,\n  //           }));\n\n  //           // Attach like and dislike counts to the post object\n  //           return { ...post, likes_count, dislikes_count };\n  //         } catch (error) {\n  //           console.error(\"Error fetching like/dislike counts:\", error);\n  //           return post; // Return the original post if there was an error\n  //         }\n  //       });\n\n  //       // Wait for all promises to resolve\n  //       const postsWithCounts = await Promise.all(postPromises);\n\n  //       // Update the state with posts including like and dislike counts\n  //       setPosts(postsWithCounts);\n  //     })\n  //     .catch((error) => {\n  //       console.error(\"Error fetching posts:\", error);\n  //     });\n  \n  // }, [authToken, apiBaseUrl]);\n  const handleLikePost = (postId) => {\n    axios\n      .post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      })\n      .then((response) => {\n        // Handle success, e.g., update the UI to reflect the liked post\n        console.log(\"Post liked successfully\");\n        // Increment the like count for the post\n        setLikeCounts((prevCounts) => ({\n          ...prevCounts,\n          [postId]: prevCounts[postId] + 1,\n        }));\n      })\n      .catch((error) => {\n        console.error(\"Error liking post:\", error);\n      });\n  };\n\n  const handleDislikePost = (postId) => {\n    axios\n      .post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      })\n      .then((response) => {\n        // Handle success, e.g., update the UI to reflect the disliked post\n        console.log(\"Post disliked successfully\");\n        // Increment the dislike count for the post\n        setDislikeCounts((prevCounts) => ({\n          ...prevCounts,\n          [postId]: prevCounts[postId] + 1,\n        }));\n      })\n      .catch((error) => {\n        console.error(\"Error disliking post:\", error);\n      });\n  };\n\n  return (\n    <div className=\"blog\">\n      <h2>Latest Blog Posts</h2>\n      <div className=\"post-list\">\n        {posts.map((post, index) => (\n          <div key={index} className=\"post\">\n            <h3 className=\"post-title\">{post.title}</h3>\n            <p className=\"post-author\">By {post.author}</p>\n            <div className=\"post-content\">{post.content}</div>\n            {post.image_url && (\n              <img\n                src={`${apiBaseUrl}${post.image_url}`} // Use the absolute image URL\n                alt={post.title} // Set an appropriate alt text\n                className=\"post-image\"\n                onLoad={() => console.log(\"Image loaded successfully\")} // Log when the image is loaded\n                onError={() => console.error(\"Image loading error\")} // Log if there's an error loading the image\n              />\n            )}\n            <div>\n              <button onClick={() => handleLikePost(post.id)}>\n                <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n                {/* Thumbs up icon */}\n                <span>{likeCounts[post.id]}</span> {/* Display like count */}\n              </button>\n              <button onClick={() => handleDislikePost(post.id)}>\n                <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n                {/* Thumbs down icon */}\n                <span>{dislikeCounts[post.id]}</span>{\" \"}\n                {/* Display dislike count */}\n              </button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Blog;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}