{"ast":null,"code":"var _jsxFileName = \"/home/markpaul/projects/Blog-client/src/components/createpost/createpost.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import Dropzone from \"react-dropzone\";\n// import axios from \"axios\";\n// import \"./createpost.css\";\n\n// const CreatePost = ({ currentUser }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [categories, setCategories] = useState([]);\n//   const [images, setImages] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch categories from the backend and set them to the state\n//     axios\n//       .get(\"http://localhost:3001/categories\")\n//       .then((response) => {\n//         setCategories(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching categories:\", error);\n//       });\n//   }, []);\n\n//   const handleImageDrop = (acceptedFiles) => {\n//     setImages(acceptedFiles);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append(\"post[title]\", title);\n//     formData.append(\"post[content]\", content);\n\n//     // Ensure the category ID is an integer\n//     const categoryId = parseInt(category, 10);\n//     formData.append(\"post[category_id]\", categoryId);\n\n//     images.forEach((image) => formData.append(\"post[images][]\", image));\n\n//     // Retrieve the user's authentication token from local storage\n//     const authToken = localStorage.getItem('authToken');\n//     console.log('Auth Token:', authToken); // Add this line to log the authToken\n\n//     const headers = {\n//       'Authorization': `Bearer ${authToken}`,\n//       'Content-Type': 'multipart/form-data', // Set the content type for file uploads\n//     };\n\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:3001/posts\",\n//         formData,\n//         { headers }\n//       );\n//       console.log(\"Post created:\", response.data);\n//       // Reset form fields\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setCategory(\"\");\n//       setImages([]);\n//     } catch (error) {\n//       console.error(\"Error creating post:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"create-post\">\n//       <h2>Create a New Post</h2>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n//         <textarea\n//           placeholder=\"Content\"\n//           value={content}\n//           onChange={(e) => setContent(e.target.value)}\n//           required\n//         />\n//         <select\n//           value={category}\n//           onChange={(e) => setCategory(e.target.value)}\n//           required\n//         >\n//           <option value=\"\" disabled>\n//             Select a category\n//           </option>\n//           {categories.map((category) => (\n//             <option key={category.id} value={category.id}>\n//               {category.name}\n//             </option>\n//           ))}\n//         </select>\n//         <Dropzone onDrop={handleImageDrop}>\n//           {({ getRootProps, getInputProps }) => (\n//             <div className=\"dropzone\" {...getRootProps()}>\n//               <input {...getInputProps()} />\n//               <p>Drag & drop images or click here to select files</p>\n//             </div>\n//           )}\n//         </Dropzone>\n//         <br />\n//         <button class=\"fancy\" href=\"#\">\n//           <span class=\"top-key\"></span>\n//           <span class=\"text\">Create Post</span>\n//           <span class=\"bottom-key-1\"></span>\n//           <span class=\"bottom-key-2\"></span>\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default CreatePost;\n// import React, { useState, useEffect } from \"react\";\n// import Dropzone from \"react-dropzone\";\n// import axios from \"axios\";\n// import \"./createpost.css\";\n\n// const CreatePost = ({ currentUser }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [categories, setCategories] = useState([]);\n//   const [images, setImages] = useState([]);\n//   const [userPosts, setUserPosts] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch categories from the backend and set them to the state\n//     axios\n//       .get(\"http://localhost:3001/categories\")\n//       .then((response) => {\n//         setCategories(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching categories:\", error);\n//       });\n\n//     // Fetch the logged-in user's posts from the backend\n//     if (currentUser) {\n//       const authToken = localStorage.getItem(\"authToken\");\n//       const userId = currentUser.id; // Check if currentUser is defined\n\n//       axios\n//         .get(`http://localhost:3001/users/${userId}/posts`, {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         })\n//         .then((response) => {\n//           setUserPosts(response.data);\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching user posts:\", error);\n//         });\n//     }\n//   }, [currentUser]);\n\n//   const handleImageDrop = (acceptedFiles) => {\n//     setImages(acceptedFiles);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append(\"post[title]\", title);\n//     formData.append(\"post[content]\", content);\n\n//     // Ensure the category ID is an integer\n//     const categoryId = parseInt(category, 10);\n//     formData.append(\"post[category_id]\", categoryId);\n\n//     images.forEach((image) => formData.append(\"post[images][]\", image));\n\n//     // Retrieve the user's authentication token from local storage\n//     const authToken = localStorage.getItem(\"authToken\");\n//     console.log(\"Auth Token:\", authToken);\n\n//     const headers = {\n//       Authorization: `Bearer ${authToken}`,\n//       \"Content-Type\": \"multipart/form-data\", // Set the content type for file uploads\n//     };\n\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:3001/posts\",\n//         formData,\n//         { headers }\n//       );\n//       console.log(\"Post created:\", response.data);\n//       // Reset form fields\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setCategory(\"\");\n//       setImages([]);\n//     } catch (error) {\n//       console.error(\"Error creating post:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"create-post\">\n//       <h2>Create a New Post</h2>\n// <form onSubmit={handleSubmit}>\n//   <input\n//     type=\"text\"\n//     placeholder=\"Title\"\n//     value={title}\n//     onChange={(e) => setTitle(e.target.value)}\n//     required\n//   />\n//   <textarea\n//     placeholder=\"Content\"\n//     value={content}\n//     onChange={(e) => setContent(e.target.value)}\n//     required\n//   />\n//   <select\n//     value={category}\n//     onChange={(e) => setCategory(e.target.value)}\n//     required\n//   >\n//     <option value=\"\" disabled>\n//       Select a category\n//     </option>\n//     {categories.map((category) => (\n//       <option key={category.id} value={category.id}>\n//         {category.name}\n//       </option>\n//     ))}\n//   </select>\n//   <Dropzone onDrop={handleImageDrop}>\n//     {({ getRootProps, getInputProps }) => (\n//       <div className=\"dropzone\" {...getRootProps()}>\n//         <input {...getInputProps()} />\n//         <p>Drag & drop images or click here to select files</p>\n//       </div>\n//     )}\n//   </Dropzone>\n//   <br />\n//   <button className=\"fancy\" href=\"#\">\n//     <span className=\"top-key\"></span>\n//     <span className=\"text\">Create Post</span>\n//     <span className=\"bottom-key-1\"></span>\n//     <span className=\"bottom-key-2\"></span>\n//   </button>\n// </form>\n//     </div>\n//   );\n//   <div className=\"posts\">\n//     <h3>Your Posts</h3>\n//     {userPosts.length === 0 ? (\n//       <p>No blogs, start your blogging journey</p>\n//     ) : (\n//       <div className=\"blog-cards-container\">\n//       <ul>\n//         {userPosts.map((post) => (\n//           <li key={post.id}>\n//             <h4>{post.title}</h4>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   )}\n// </div>\n\n// };\n\n// export default CreatePost;\nimport React, { useState, useEffect } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport axios from \"axios\";\nimport \"./createpost.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CreatePost = ({\n  currentUser\n}) => {\n  _s();\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [categories, setCategories] = useState([]);\n  const [images, setImages] = useState([]);\n  const [userPosts, setUserPosts] = useState([]);\n  const [showCreatePost, setShowCreatePost] = useState(true);\n  const getCategoryName = categoryId => {\n    const category = categories.find(cat => cat.id === categoryId);\n    return category ? category.name : \"Unknown Category\";\n  };\n  useEffect(() => {\n    // Fetch categories from the backend and set them to the state\n    axios.get(\"http://localhost:3001/categories\").then(response => {\n      setCategories(response.data);\n    }).catch(error => {\n      console.error(\"Error fetching categories:\", error);\n    });\n\n    // Fetch the logged-in user's posts from the backend\n    if (currentUser) {\n      const authToken = localStorage.getItem(\"authToken\");\n      const userId = currentUser.id; // Check if currentUser is defined\n\n      axios.get(`http://localhost:3001/users/${userId}/posts`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      }).then(response => {\n        setUserPosts(response.data);\n      }).catch(error => {\n        console.error(\"Error fetching user posts:\", error);\n      });\n    }\n  }, [currentUser]);\n  const handleImageDrop = acceptedFiles => {\n    setImages(acceptedFiles);\n  };\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append(\"post[title]\", title);\n    formData.append(\"post[content]\", content);\n\n    // Ensure the category ID is an integer\n    const categoryId = parseInt(category, 10);\n    formData.append(\"post[category_id]\", categoryId);\n    images.forEach(image => formData.append(\"post[images][]\", image));\n    const getCategoryName = async categoryId => {\n      try {\n        const response = await axios.get(`http://localhost:3001/categories/${categoryId}`);\n        return response.data.name;\n      } catch (error) {\n        console.error(\"Error fetching category:\", error);\n        return \"Unknown Category\";\n      }\n    };\n\n    // Retrieve the user's authentication token from local storage\n    const authToken = localStorage.getItem(\"authToken\");\n    console.log(\"Auth Token:\", authToken);\n    const headers = {\n      Authorization: `Bearer ${authToken}`,\n      \"Content-Type\": \"multipart/form-data\" // Set the content type for file uploads\n    };\n\n    try {\n      const response = await axios.post(\"http://localhost:3001/posts\", formData, {\n        headers\n      });\n      console.log(\"Post created:\", response.data);\n      // Reset form fields\n      setTitle(\"\");\n      setContent(\"\");\n      setCategory(\"\");\n      setImages([]);\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n    }\n  };\n  const toggleCreatePost = () => {\n    setShowCreatePost(!showCreatePost);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [showCreatePost && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create-post\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create a New Post\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmit,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Title\",\n          value: title,\n          onChange: e => setTitle(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"Content\",\n          value: content,\n          onChange: e => setContent(e.target.value),\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: category,\n          onChange: e => setCategory(e.target.value),\n          required: true,\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select a category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 15\n          }, this), categories.map(category => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: category.id,\n            children: category.name\n          }, category.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Dropzone, {\n          onDrop: handleImageDrop,\n          children: ({\n            getRootProps,\n            getInputProps\n          }) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"dropzone\",\n            ...getRootProps(),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              ...getInputProps()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 421,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"Drag & drop images or click here to select files\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 418,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"fancy\",\n          href: \"#\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"top-key\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text\",\n            children: \"Create Post\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bottom-key-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"bottom-key-2\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 9\n    }, this), \"V\", /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCreatePost,\n      children: showCreatePost ? \"Hide Create Post\" : \"Show Create Post\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n};\n_s(CreatePost, \"vJgREg7lXkID1ID0KjCUx8UnOBk=\");\n_c = CreatePost;\nexport default CreatePost;\nvar _c;\n$RefreshReg$(_c, \"CreatePost\");","map":{"version":3,"names":["React","useState","useEffect","Dropzone","axios","jsxDEV","_jsxDEV","CreatePost","currentUser","_s","title","setTitle","content","setContent","category","setCategory","categories","setCategories","images","setImages","userPosts","setUserPosts","showCreatePost","setShowCreatePost","getCategoryName","categoryId","find","cat","id","name","get","then","response","data","catch","error","console","authToken","localStorage","getItem","userId","headers","Authorization","handleImageDrop","acceptedFiles","handleSubmit","event","preventDefault","formData","FormData","append","parseInt","forEach","image","log","post","toggleCreatePost","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","placeholder","value","onChange","e","target","required","disabled","map","onDrop","getRootProps","getInputProps","href","onClick","_c","$RefreshReg$"],"sources":["/home/markpaul/projects/Blog-client/src/components/createpost/createpost.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import Dropzone from \"react-dropzone\";\n// import axios from \"axios\";\n// import \"./createpost.css\";\n\n// const CreatePost = ({ currentUser }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [categories, setCategories] = useState([]);\n//   const [images, setImages] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch categories from the backend and set them to the state\n//     axios\n//       .get(\"http://localhost:3001/categories\")\n//       .then((response) => {\n//         setCategories(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching categories:\", error);\n//       });\n//   }, []);\n\n//   const handleImageDrop = (acceptedFiles) => {\n//     setImages(acceptedFiles);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append(\"post[title]\", title);\n//     formData.append(\"post[content]\", content);\n\n//     // Ensure the category ID is an integer\n//     const categoryId = parseInt(category, 10);\n//     formData.append(\"post[category_id]\", categoryId);\n\n//     images.forEach((image) => formData.append(\"post[images][]\", image));\n\n//     // Retrieve the user's authentication token from local storage\n//     const authToken = localStorage.getItem('authToken');\n//     console.log('Auth Token:', authToken); // Add this line to log the authToken\n\n//     const headers = {\n//       'Authorization': `Bearer ${authToken}`,\n//       'Content-Type': 'multipart/form-data', // Set the content type for file uploads\n//     };\n\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:3001/posts\",\n//         formData,\n//         { headers }\n//       );\n//       console.log(\"Post created:\", response.data);\n//       // Reset form fields\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setCategory(\"\");\n//       setImages([]);\n//     } catch (error) {\n//       console.error(\"Error creating post:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"create-post\">\n//       <h2>Create a New Post</h2>\n//       <form onSubmit={handleSubmit}>\n//         <input\n//           type=\"text\"\n//           placeholder=\"Title\"\n//           value={title}\n//           onChange={(e) => setTitle(e.target.value)}\n//           required\n//         />\n//         <textarea\n//           placeholder=\"Content\"\n//           value={content}\n//           onChange={(e) => setContent(e.target.value)}\n//           required\n//         />\n//         <select\n//           value={category}\n//           onChange={(e) => setCategory(e.target.value)}\n//           required\n//         >\n//           <option value=\"\" disabled>\n//             Select a category\n//           </option>\n//           {categories.map((category) => (\n//             <option key={category.id} value={category.id}>\n//               {category.name}\n//             </option>\n//           ))}\n//         </select>\n//         <Dropzone onDrop={handleImageDrop}>\n//           {({ getRootProps, getInputProps }) => (\n//             <div className=\"dropzone\" {...getRootProps()}>\n//               <input {...getInputProps()} />\n//               <p>Drag & drop images or click here to select files</p>\n//             </div>\n//           )}\n//         </Dropzone>\n//         <br />\n//         <button class=\"fancy\" href=\"#\">\n//           <span class=\"top-key\"></span>\n//           <span class=\"text\">Create Post</span>\n//           <span class=\"bottom-key-1\"></span>\n//           <span class=\"bottom-key-2\"></span>\n//         </button>\n//       </form>\n//     </div>\n//   );\n// };\n\n// export default CreatePost;\n// import React, { useState, useEffect } from \"react\";\n// import Dropzone from \"react-dropzone\";\n// import axios from \"axios\";\n// import \"./createpost.css\";\n\n// const CreatePost = ({ currentUser }) => {\n//   const [title, setTitle] = useState(\"\");\n//   const [content, setContent] = useState(\"\");\n//   const [category, setCategory] = useState(\"\");\n//   const [categories, setCategories] = useState([]);\n//   const [images, setImages] = useState([]);\n//   const [userPosts, setUserPosts] = useState([]);\n\n//   useEffect(() => {\n//     // Fetch categories from the backend and set them to the state\n//     axios\n//       .get(\"http://localhost:3001/categories\")\n//       .then((response) => {\n//         setCategories(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching categories:\", error);\n//       });\n\n//     // Fetch the logged-in user's posts from the backend\n//     if (currentUser) {\n//       const authToken = localStorage.getItem(\"authToken\");\n//       const userId = currentUser.id; // Check if currentUser is defined\n\n//       axios\n//         .get(`http://localhost:3001/users/${userId}/posts`, {\n//           headers: {\n//             Authorization: `Bearer ${authToken}`,\n//           },\n//         })\n//         .then((response) => {\n//           setUserPosts(response.data);\n//         })\n//         .catch((error) => {\n//           console.error(\"Error fetching user posts:\", error);\n//         });\n//     }\n//   }, [currentUser]);\n\n//   const handleImageDrop = (acceptedFiles) => {\n//     setImages(acceptedFiles);\n//   };\n\n//   const handleSubmit = async (event) => {\n//     event.preventDefault();\n\n//     const formData = new FormData();\n//     formData.append(\"post[title]\", title);\n//     formData.append(\"post[content]\", content);\n\n//     // Ensure the category ID is an integer\n//     const categoryId = parseInt(category, 10);\n//     formData.append(\"post[category_id]\", categoryId);\n\n//     images.forEach((image) => formData.append(\"post[images][]\", image));\n\n//     // Retrieve the user's authentication token from local storage\n//     const authToken = localStorage.getItem(\"authToken\");\n//     console.log(\"Auth Token:\", authToken);\n\n//     const headers = {\n//       Authorization: `Bearer ${authToken}`,\n//       \"Content-Type\": \"multipart/form-data\", // Set the content type for file uploads\n//     };\n\n//     try {\n//       const response = await axios.post(\n//         \"http://localhost:3001/posts\",\n//         formData,\n//         { headers }\n//       );\n//       console.log(\"Post created:\", response.data);\n//       // Reset form fields\n//       setTitle(\"\");\n//       setContent(\"\");\n//       setCategory(\"\");\n//       setImages([]);\n//     } catch (error) {\n//       console.error(\"Error creating post:\", error);\n//     }\n//   };\n\n//   return (\n//     <div className=\"create-post\">\n//       <h2>Create a New Post</h2>\n// <form onSubmit={handleSubmit}>\n//   <input\n//     type=\"text\"\n//     placeholder=\"Title\"\n//     value={title}\n//     onChange={(e) => setTitle(e.target.value)}\n//     required\n//   />\n//   <textarea\n//     placeholder=\"Content\"\n//     value={content}\n//     onChange={(e) => setContent(e.target.value)}\n//     required\n//   />\n//   <select\n//     value={category}\n//     onChange={(e) => setCategory(e.target.value)}\n//     required\n//   >\n//     <option value=\"\" disabled>\n//       Select a category\n//     </option>\n//     {categories.map((category) => (\n//       <option key={category.id} value={category.id}>\n//         {category.name}\n//       </option>\n//     ))}\n//   </select>\n//   <Dropzone onDrop={handleImageDrop}>\n//     {({ getRootProps, getInputProps }) => (\n//       <div className=\"dropzone\" {...getRootProps()}>\n//         <input {...getInputProps()} />\n//         <p>Drag & drop images or click here to select files</p>\n//       </div>\n//     )}\n//   </Dropzone>\n//   <br />\n//   <button className=\"fancy\" href=\"#\">\n//     <span className=\"top-key\"></span>\n//     <span className=\"text\">Create Post</span>\n//     <span className=\"bottom-key-1\"></span>\n//     <span className=\"bottom-key-2\"></span>\n//   </button>\n// </form>\n//     </div>\n//   );\n//   <div className=\"posts\">\n//     <h3>Your Posts</h3>\n//     {userPosts.length === 0 ? (\n//       <p>No blogs, start your blogging journey</p>\n//     ) : (\n//       <div className=\"blog-cards-container\">\n//       <ul>\n//         {userPosts.map((post) => (\n//           <li key={post.id}>\n//             <h4>{post.title}</h4>\n//           </li>\n//         ))}\n//       </ul>\n//     </div>\n//   )}\n// </div>\n\n// };\n\n// export default CreatePost;\nimport React, { useState, useEffect } from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport axios from \"axios\";\nimport \"./createpost.css\";\n\nconst CreatePost = ({ currentUser }) => {\n  const [title, setTitle] = useState(\"\");\n  const [content, setContent] = useState(\"\");\n  const [category, setCategory] = useState(\"\");\n  const [categories, setCategories] = useState([]);\n  const [images, setImages] = useState([]);\n  const [userPosts, setUserPosts] = useState([]);\n  const [showCreatePost, setShowCreatePost] = useState(true);\n\n  const getCategoryName = (categoryId) => {\n    const category = categories.find((cat) => cat.id === categoryId);\n    return category ? category.name : \"Unknown Category\";\n  };\n\n  useEffect(() => {\n    // Fetch categories from the backend and set them to the state\n    axios\n      .get(\"http://localhost:3001/categories\")\n      .then((response) => {\n        setCategories(response.data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching categories:\", error);\n      });\n\n    // Fetch the logged-in user's posts from the backend\n    if (currentUser) {\n      const authToken = localStorage.getItem(\"authToken\");\n      const userId = currentUser.id; // Check if currentUser is defined\n\n      axios\n        .get(`http://localhost:3001/users/${userId}/posts`, {\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n          },\n        })\n        .then((response) => {\n          setUserPosts(response.data);\n        })\n        .catch((error) => {\n          console.error(\"Error fetching user posts:\", error);\n        });\n    }\n  }, [currentUser]);\n\n  const handleImageDrop = (acceptedFiles) => {\n    setImages(acceptedFiles);\n  };\n\n  const handleSubmit = async (event) => {\n    event.preventDefault();\n\n    const formData = new FormData();\n    formData.append(\"post[title]\", title);\n    formData.append(\"post[content]\", content);\n\n    // Ensure the category ID is an integer\n    const categoryId = parseInt(category, 10);\n    formData.append(\"post[category_id]\", categoryId);\n\n    images.forEach((image) => formData.append(\"post[images][]\", image));\n\n    const getCategoryName = async (categoryId) => {\n      try {\n        const response = await axios.get(\n          `http://localhost:3001/categories/${categoryId}`\n        );\n        return response.data.name;\n      } catch (error) {\n        console.error(\"Error fetching category:\", error);\n        return \"Unknown Category\";\n      }\n    };\n\n    // Retrieve the user's authentication token from local storage\n    const authToken = localStorage.getItem(\"authToken\");\n    console.log(\"Auth Token:\", authToken);\n\n    const headers = {\n      Authorization: `Bearer ${authToken}`,\n      \"Content-Type\": \"multipart/form-data\", // Set the content type for file uploads\n    };\n\n    try {\n      const response = await axios.post(\n        \"http://localhost:3001/posts\",\n        formData,\n        { headers }\n      );\n      console.log(\"Post created:\", response.data);\n      // Reset form fields\n      setTitle(\"\");\n      setContent(\"\");\n      setCategory(\"\");\n      setImages([]);\n    } catch (error) {\n      console.error(\"Error creating post:\", error);\n    }\n  };\n\n  const toggleCreatePost = () => {\n    setShowCreatePost(!showCreatePost);\n  };\n\n  return (\n    <div>\n      {showCreatePost && (\n        <div className=\"create-post\">\n          <h2>Create a New Post</h2>\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              placeholder=\"Title\"\n              value={title}\n              onChange={(e) => setTitle(e.target.value)}\n              required\n            />\n            <textarea\n              placeholder=\"Content\"\n              value={content}\n              onChange={(e) => setContent(e.target.value)}\n              required\n            />\n            <select\n              value={category}\n              onChange={(e) => setCategory(e.target.value)}\n              required\n            >\n              <option value=\"\" disabled>\n                Select a category\n              </option>\n              {categories.map((category) => (\n                <option key={category.id} value={category.id}>\n                  {category.name}\n                </option>\n              ))}\n            </select>\n            <Dropzone onDrop={handleImageDrop}>\n              {({ getRootProps, getInputProps }) => (\n                <div className=\"dropzone\" {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  <p>Drag & drop images or click here to select files</p>\n                </div>\n              )}\n            </Dropzone>\n            <br />\n            <button className=\"fancy\" href=\"#\">\n              <span className=\"top-key\"></span>\n              <span className=\"text\">Create Post</span>\n              <span className=\"bottom-key-1\"></span>\n              <span className=\"bottom-key-2\"></span>\n            </button>\n          </form>\n        </div>\n      )}\n\n      {/* <div className=\"posts\">\n        <h3>Your Posts</h3>\n        {userPosts.length === 0 ? (\n          <p>No blogs, start your blogging journey</p>\n        ) : (\n          <div className=\"blog_card\">\n            {/* <ul>\n              {userPosts.map((post, index) => (\n                <li key={post.id}>\n                  <h4 className=\"title\">{post.title}</h4>\n                  <p className=\"category\">Category: {post.category_id}</p>\n                  <p className=\"likes\">Likes: {post.likes}</p>\n                </li>\n              ))}\n            </ul> *\n            <ul>\n              {userPosts.map((post, index) => (\n                <li key={post.id}>\n                  <h4 className=\"title\">{post.title}</h4>\n                  <p className=\"category\"> {getCategoryName(post.category_id)}</p>\n                  <p className=\"likes\">Likes: {post.likes}</p>\n                </li>\n              ))}\n            </ul>\n          </div>\n        )}\n      </div> */}\n      V\n\n      <button onClick={toggleCreatePost}>\n        {showCreatePost ? \"Hide Create Post\" : \"Show Create Post\"}\n      </button>\n    </div>\n  );\n};\n\nexport default CreatePost;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAC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"},"metadata":{},"sourceType":"module","externalDependencies":[]}