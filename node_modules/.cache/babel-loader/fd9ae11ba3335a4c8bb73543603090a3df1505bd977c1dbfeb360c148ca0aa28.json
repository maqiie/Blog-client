{"ast":null,"code":"var _jsxFileName = \"/home/markpaul/projects/Blog/client/src/components/register/login.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n\n// // const Login = ({ onToggleForm }) => {\n// //   const [email, setEmail] = useState(\"\");\n// //   const [password, setPassword] = useState(\"\");\n// //   const [rememberMe, setRememberMe] = useState(false); // Added state for \"Remember me\"\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n// //         email,\n// //         password,\n// //         remember_me: rememberMe, // Send \"Remember me\" value in the request\n// //       });\n\n// //       if (response.status === 200) {\n// //         // Login successful, store the token in local storage\n// //         const authToken = response.headers[\"access-token\"];\n// //         const client = response.headers[\"client\"];\n// //         const uid = response.headers[\"uid\"];\n\n// //         localStorage.setItem(\"authToken\", authToken);\n// //         localStorage.setItem(\"client\", client);\n// //         localStorage.setItem(\"uid\", uid);\n\n// //         // Check if the token is stored\n// //         console.log(\"Login successful\");\n// //         console.log(\"Stored authToken:\", authToken);\n// //         console.log(\"Stored client:\", client);\n// //         console.log(\"Stored uid:\", uid);\n\n// //         // You can handle redirection or other actions here\n// //       } else {\n// //         // Handle login error\n// //         console.log(\"Login failed\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error logging in:\", error);\n// //     }\n// //   };\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\"; // Import useNavigate from React Router\n\n// // const Login = ({ onToggleForm }) => {\n// //   const navigate = useNavigate(); // Initialize the navigate function\n\n// //   const [email, setEmail] = useState(\"\");\n// //   const [password, setPassword] = useState(\"\");\n// //   const [rememberMe, setRememberMe] = useState(false);\n\n// //   useEffect(() => {\n// //     // Check for login state in local storage when the component mounts\n// //     const authToken = localStorage.getItem(\"authToken\");\n// //     if (authToken) {\n// //       // If the user is already logged in, navigate to the desired route\n// //       navigate(\"/createpost\"); // Change \"/dashboard\" to the route you want to navigate to\n// //     }\n// //   }, [navigate]);\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n// //         email,\n// //         password,\n// //         remember_me: rememberMe,\n// //       });\n\n// //       if (response.status === 200) {\n// //         const authToken = response.headers[\"access-token\"];\n// //         const client = response.headers[\"client\"];\n// //         const uid = response.headers[\"uid\"];\n\n// //         localStorage.setItem(\"authToken\", authToken);\n// //         localStorage.setItem(\"client\", client);\n// //         localStorage.setItem(\"uid\", uid);\n\n// //         console.log(\"Login successful\");\n// //         console.log(\"Stored authToken:\", authToken);\n// //         console.log(\"Stored client:\", client);\n// //         console.log(\"Stored uid:\", uid);\n\n// //         // Navigate to the desired route after a successful login\n// //         navigate(\"/createpost\"); // Change \"/dashboard\" to the route you want to navigate to\n// //       } else {\n// //         console.log(\"Login failed\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error logging in:\", error);\n// //     }\n// //   };\n// const Login = ({ onToggleForm }) => {\n//   const navigate = useNavigate();\n\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [rememberMe, setRememberMe] = useState(false);\n\n//   // Initialize isLoggedIn state by checking localStorage\n//   const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem(\"authToken\"));\n\n//   useEffect(() => {\n//     // Check for login state in local storage when the component mounts\n//     const authToken = localStorage.getItem(\"authToken\");\n//     if (authToken) {\n//       setIsLoggedIn(true); // User is logged in\n//       // Redirect to the desired route for logged-in users\n//       // navigate(\"/createpost\"); // Change \"/createpost\" to your desired route\n//     } else {\n//       setIsLoggedIn(false); // User is not logged in\n//     }\n//   }, [navigate]);\n\n// // const handleLogin = async (e) => {\n// //   e.preventDefault();\n\n// //   try {\n// //     const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n// //       email,\n// //       password,\n// //       remember_me: rememberMe,\n// //     });\n\n// //     if (response.status === 200) {\n// //       const authToken = response.headers[\"Authorization\"];\n// //       const client = response.headers[\"client\"];\n// //       const uid = response.headers[\"uid\"];\n\n// //       // Check if authToken is present and starts with \"Bearer \"\n// //       if (authToken && authToken.startsWith(\"Bearer \")) {\n// //         // Extract and store the Bearer token in local storage\n// //         const token = authToken.split(\"Bearer \")[1];\n// //         localStorage.setItem(\"authToken\", token);\n// //       } else {\n// //         console.log(\"Invalid Authorization header format.\");\n// //         return; // Handle the error appropriately\n// //       }\n\n// //       localStorage.setItem(\"client\", client);\n// //       localStorage.setItem(\"uid\", uid);\n\n// //       console.log(\"Login successful\");\n// //       console.log(\"Stored authToken:\", authToken);\n// //       console.log(\"Stored client:\", client);\n// //       console.log(\"Stored uid:\", uid);\n\n// //       setIsLoggedIn(true); // User is now logged in\n\n// //       // Navigate to the desired route after a successful login\n// //       navigate(\"/createpost\"); // Change \"/createpost\" to your desired route\n// //     } else {\n// //       console.log(\"Login failed\");\n// //     }\n// //   } catch (error) {\n// //     console.error(\"Error logging in:\", error);\n// //   }\n// // };\n// const handleLogin = async (e) => {\n//   e.preventDefault();\n\n//   try {\n//     const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n//       email,\n//       password,\n//       remember_me: rememberMe,\n//     });\n\n//     if (response.status === 200) {\n//       const authToken = response.headers[\"Authorization\"];\n//       const client = response.headers[\"client\"];\n//       const uid = response.headers[\"uid\"];\n\n//       localStorage.setItem(\"authToken\", authToken);\n//       localStorage.setItem(\"client\", client);\n//       localStorage.setItem(\"uid\", uid);\n\n//       console.log(\"Login successful\");\n//       console.log(\"Stored authToken:\", authToken);\n//       console.log(\"Stored client:\", client);\n//       console.log(\"Stored uid:\", uid);\n\n//       setIsLoggedIn(true); // User is now logged in\n\n//       // Navigate to the desired route after a successful login\n//       navigate(\"/createpost\"); // Change \"/createpost\" to your desired route\n//     } else {\n//       console.log(\"Login failed\");\n//     }\n//   } catch (error) {\n//     console.error(\"Error logging in:\", error);\n//   }\n// };\n\n//   return (\n//     <div className=\"auth-form bg-white p-6 rounded shadow\">\n//       <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Login</h2>\n//       <form onSubmit={handleLogin}>\n//         <div className=\"mb-3\">\n//           <label className=\"block text-sm font-medium text-gray-600\">\n//             Email\n//           </label>\n//           <input\n//             type=\"email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             className=\"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\"\n//             required\n//           />\n//         </div>\n//         <div className=\"mb-3\">\n//           <label className=\"block text-sm font-medium text-gray-600\">\n//             Password\n//           </label>\n//           <input\n//             type=\"password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//             className=\"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\"\n//             required\n//           />\n//         </div>\n//         <div className=\"mb-3\">\n//           <label className=\"block text-sm font-medium text-gray-600\">\n//             <input\n//               type=\"checkbox\"\n//               checked={rememberMe}\n//               onChange={() => setRememberMe(!rememberMe)}\n//               className=\"mr-1\"\n//             />\n//             Remember me\n//           </label>\n//         </div>\n//         <button\n//           type=\"submit\"\n//           className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition duration-300 shadow-md\"\n//         >\n//           Login\n//         </button>\n//       </form>\n//       <p className=\"mt-4\">\n//         Don't have an account?{\" \"}\n//         <button\n//           onClick={onToggleForm}\n//           className=\"text-blue-500 hover:underline focus:outline-none\"\n//         >\n//           Sign Up\n//         </button>\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default Login;\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = ({\n  onToggleForm\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [rememberMe, setRememberMe] = useState(false);\n  const [error, setError] = useState(null);\n  const handleLogin = async e => {\n    e.preventDefault();\n    try {\n      const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n        email,\n        password,\n        remember_me: rememberMe\n      });\n      if (response.status === 200) {\n        const authToken = response.headers[\"Authorization\"];\n        // Check if authToken is present and starts with \"Bearer \"\n        if (authToken && authToken.startsWith(\"Bearer \")) {\n          // Extract and store the Bearer token in local storage\n          const token = authToken.split(\"Bearer \")[1];\n          localStorage.setItem(\"authToken\", token);\n          navigate(\"/createpost\"); // Redirect upon successful login\n        } else {\n          setError(\"Invalid Authorization header format.\");\n        }\n      } else {\n        setError(\"Login failed. Check your credentials.\");\n      }\n    } catch (error) {\n      setError(\"Error logging in. Please try again later.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-form bg-white p-6 rounded shadow\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold mb-4 text-blue-600\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium text-gray-600\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          className: \"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium text-gray-600\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          className: \"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium text-gray-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: rememberMe,\n            onChange: () => setRememberMe(!rememberMe),\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 13\n          }, this), \"Remember me\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 339,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition duration-300 shadow-md\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 349,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4\",\n      children: [\"Don't have an account?\", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onToggleForm,\n        className: \"text-blue-500 hover:underline focus:outline-none\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 358,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 356,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"fWxuMxc5lO5y7VTT5XMtF5Z8e4M=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","axios","useNavigate","jsxDEV","_jsxDEV","Login","onToggleForm","_s","navigate","email","setEmail","password","setPassword","rememberMe","setRememberMe","error","setError","handleLogin","e","preventDefault","response","post","remember_me","status","authToken","headers","startsWith","token","split","localStorage","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","checked","onClick","_c","$RefreshReg$"],"sources":["/home/markpaul/projects/Blog/client/src/components/register/login.js"],"sourcesContent":["\n// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n\n// // const Login = ({ onToggleForm }) => {\n// //   const [email, setEmail] = useState(\"\");\n// //   const [password, setPassword] = useState(\"\");\n// //   const [rememberMe, setRememberMe] = useState(false); // Added state for \"Remember me\"\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n// //         email,\n// //         password,\n// //         remember_me: rememberMe, // Send \"Remember me\" value in the request\n// //       });\n\n// //       if (response.status === 200) {\n// //         // Login successful, store the token in local storage\n// //         const authToken = response.headers[\"access-token\"];\n// //         const client = response.headers[\"client\"];\n// //         const uid = response.headers[\"uid\"];\n\n// //         localStorage.setItem(\"authToken\", authToken);\n// //         localStorage.setItem(\"client\", client);\n// //         localStorage.setItem(\"uid\", uid);\n\n// //         // Check if the token is stored\n// //         console.log(\"Login successful\");\n// //         console.log(\"Stored authToken:\", authToken);\n// //         console.log(\"Stored client:\", client);\n// //         console.log(\"Stored uid:\", uid);\n\n// //         // You can handle redirection or other actions here\n// //       } else {\n// //         // Handle login error\n// //         console.log(\"Login failed\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error logging in:\", error);\n// //     }\n// //   };\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\"; // Import useNavigate from React Router\n\n// // const Login = ({ onToggleForm }) => {\n// //   const navigate = useNavigate(); // Initialize the navigate function\n\n// //   const [email, setEmail] = useState(\"\");\n// //   const [password, setPassword] = useState(\"\");\n// //   const [rememberMe, setRememberMe] = useState(false);\n\n// //   useEffect(() => {\n// //     // Check for login state in local storage when the component mounts\n// //     const authToken = localStorage.getItem(\"authToken\");\n// //     if (authToken) {\n// //       // If the user is already logged in, navigate to the desired route\n// //       navigate(\"/createpost\"); // Change \"/dashboard\" to the route you want to navigate to\n// //     }\n// //   }, [navigate]);\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n// //         email,\n// //         password,\n// //         remember_me: rememberMe,\n// //       });\n\n// //       if (response.status === 200) {\n// //         const authToken = response.headers[\"access-token\"];\n// //         const client = response.headers[\"client\"];\n// //         const uid = response.headers[\"uid\"];\n\n// //         localStorage.setItem(\"authToken\", authToken);\n// //         localStorage.setItem(\"client\", client);\n// //         localStorage.setItem(\"uid\", uid);\n\n// //         console.log(\"Login successful\");\n// //         console.log(\"Stored authToken:\", authToken);\n// //         console.log(\"Stored client:\", client);\n// //         console.log(\"Stored uid:\", uid);\n\n// //         // Navigate to the desired route after a successful login\n// //         navigate(\"/createpost\"); // Change \"/dashboard\" to the route you want to navigate to\n// //       } else {\n// //         console.log(\"Login failed\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error logging in:\", error);\n// //     }\n// //   };\n// const Login = ({ onToggleForm }) => {\n//   const navigate = useNavigate();\n\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [rememberMe, setRememberMe] = useState(false);\n\n//   // Initialize isLoggedIn state by checking localStorage\n//   const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem(\"authToken\"));\n\n//   useEffect(() => {\n//     // Check for login state in local storage when the component mounts\n//     const authToken = localStorage.getItem(\"authToken\");\n//     if (authToken) {\n//       setIsLoggedIn(true); // User is logged in\n//       // Redirect to the desired route for logged-in users\n//       // navigate(\"/createpost\"); // Change \"/createpost\" to your desired route\n//     } else {\n//       setIsLoggedIn(false); // User is not logged in\n//     }\n//   }, [navigate]);\n\n\n// // const handleLogin = async (e) => {\n// //   e.preventDefault();\n\n// //   try {\n// //     const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n// //       email,\n// //       password,\n// //       remember_me: rememberMe,\n// //     });\n\n// //     if (response.status === 200) {\n// //       const authToken = response.headers[\"Authorization\"];\n// //       const client = response.headers[\"client\"];\n// //       const uid = response.headers[\"uid\"];\n\n// //       // Check if authToken is present and starts with \"Bearer \"\n// //       if (authToken && authToken.startsWith(\"Bearer \")) {\n// //         // Extract and store the Bearer token in local storage\n// //         const token = authToken.split(\"Bearer \")[1];\n// //         localStorage.setItem(\"authToken\", token);\n// //       } else {\n// //         console.log(\"Invalid Authorization header format.\");\n// //         return; // Handle the error appropriately\n// //       }\n\n// //       localStorage.setItem(\"client\", client);\n// //       localStorage.setItem(\"uid\", uid);\n\n// //       console.log(\"Login successful\");\n// //       console.log(\"Stored authToken:\", authToken);\n// //       console.log(\"Stored client:\", client);\n// //       console.log(\"Stored uid:\", uid);\n\n// //       setIsLoggedIn(true); // User is now logged in\n\n// //       // Navigate to the desired route after a successful login\n// //       navigate(\"/createpost\"); // Change \"/createpost\" to your desired route\n// //     } else {\n// //       console.log(\"Login failed\");\n// //     }\n// //   } catch (error) {\n// //     console.error(\"Error logging in:\", error);\n// //   }\n// // };\n// const handleLogin = async (e) => {\n//   e.preventDefault();\n\n//   try {\n//     const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n//       email,\n//       password,\n//       remember_me: rememberMe,\n//     });\n\n//     if (response.status === 200) {\n//       const authToken = response.headers[\"Authorization\"];\n//       const client = response.headers[\"client\"];\n//       const uid = response.headers[\"uid\"];\n\n//       localStorage.setItem(\"authToken\", authToken);\n//       localStorage.setItem(\"client\", client);\n//       localStorage.setItem(\"uid\", uid);\n\n//       console.log(\"Login successful\");\n//       console.log(\"Stored authToken:\", authToken);\n//       console.log(\"Stored client:\", client);\n//       console.log(\"Stored uid:\", uid);\n\n//       setIsLoggedIn(true); // User is now logged in\n\n//       // Navigate to the desired route after a successful login\n//       navigate(\"/createpost\"); // Change \"/createpost\" to your desired route\n//     } else {\n//       console.log(\"Login failed\");\n//     }\n//   } catch (error) {\n//     console.error(\"Error logging in:\", error);\n//   }\n// };\n\n\n//   return (\n//     <div className=\"auth-form bg-white p-6 rounded shadow\">\n//       <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Login</h2>\n//       <form onSubmit={handleLogin}>\n//         <div className=\"mb-3\">\n//           <label className=\"block text-sm font-medium text-gray-600\">\n//             Email\n//           </label>\n//           <input\n//             type=\"email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             className=\"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\"\n//             required\n//           />\n//         </div>\n//         <div className=\"mb-3\">\n//           <label className=\"block text-sm font-medium text-gray-600\">\n//             Password\n//           </label>\n//           <input\n//             type=\"password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//             className=\"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\"\n//             required\n//           />\n//         </div>\n//         <div className=\"mb-3\">\n//           <label className=\"block text-sm font-medium text-gray-600\">\n//             <input\n//               type=\"checkbox\"\n//               checked={rememberMe}\n//               onChange={() => setRememberMe(!rememberMe)}\n//               className=\"mr-1\"\n//             />\n//             Remember me\n//           </label>\n//         </div>\n//         <button\n//           type=\"submit\"\n//           className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition duration-300 shadow-md\"\n//         >\n//           Login\n//         </button>\n//       </form>\n//       <p className=\"mt-4\">\n//         Don't have an account?{\" \"}\n//         <button\n//           onClick={onToggleForm}\n//           className=\"text-blue-500 hover:underline focus:outline-none\"\n//         >\n//           Sign Up\n//         </button>\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default Login;\n        \n\n\n\n\n\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Login = ({ onToggleForm }) => {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [rememberMe, setRememberMe] = useState(false);\n  const [error, setError] = useState(null);\n\n  const handleLogin = async (e) => {\n    e.preventDefault();\n\n    try {\n      const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n        email,\n        password,\n        remember_me: rememberMe,\n      });\n\n      if (response.status === 200) {\n        const authToken = response.headers[\"Authorization\"];\n        // Check if authToken is present and starts with \"Bearer \"\n        if (authToken && authToken.startsWith(\"Bearer \")) {\n          // Extract and store the Bearer token in local storage\n          const token = authToken.split(\"Bearer \")[1];\n          localStorage.setItem(\"authToken\", token);\n          \n          navigate(\"/createpost\"); // Redirect upon successful login\n        } else {\n          setError(\"Invalid Authorization header format.\");\n        }\n      } else {\n        setError(\"Login failed. Check your credentials.\");\n      }\n    } catch (error) {\n      setError(\"Error logging in. Please try again later.\");\n    }\n  };\n\n  return (\n    <div className=\"auth-form bg-white p-6 rounded shadow\">\n      <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Login</h2>\n      {error && <p className=\"text-red-500\">{error}</p>}\n      <form onSubmit={handleLogin}>\n        <div className=\"mb-3\">\n          <label className=\"block text-sm font-medium text-gray-600\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            className=\"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\"\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label className=\"block text-sm font-medium text-gray-600\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\"\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label className=\"block text-sm font-medium text-gray-600\">\n            <input\n              type=\"checkbox\"\n              checked={rememberMe}\n              onChange={() => setRememberMe(!rememberMe)}\n              className=\"mr-1\"\n            />\n            Remember me\n          </label>\n        </div>\n        <button\n          type=\"submit\"\n          className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition duration-300 shadow-md\"\n        >\n          Login\n        </button>\n      </form>\n      <p className=\"mt-4\">\n        Don't have an account?{\" \"}\n        <button\n          onClick={onToggleForm}\n          className=\"text-blue-500 hover:underline focus:outline-none\"\n        >\n          Sign Up\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":";;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAOA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO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"},"metadata":{},"sourceType":"module","externalDependencies":[]}