{"ast":null,"code":"var _jsxFileName = \"/home/markpaul/projects/Blog-client/src/components/Blogs/Blogs.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from \"react\";\n// import \"font-awesome/css/font-awesome.min.css\";\n// import axios from \"axios\";\n// import \"./Blogs.css\";\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [expandedPostId, setExpandedPostId] = useState(null); // Track the expanded post\n//   const authToken = localStorage.getItem(\"authToken\");\n//   const apiBaseUrl = \"http://localhost:3001\";\n\n//   useEffect(() => {\n//     // Fetch blog posts with their like and dislike counts\n//     axios\n//       .get(`${apiBaseUrl}/posts`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//           Accept: \"application/json\",\n//         },\n//       })\n//       .then((response) => {\n//         setPosts(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching posts:\", error);\n//       });\n//   }, [authToken, apiBaseUrl]);\n\n//   const handleLikePost = async (postId) => {\n//     try {\n//       // Send a POST request to like the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post liked successfully\");\n\n//       // Fetch the updated like count\n//       const likeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/likes`\n//       ); // Use the new \"likes\" route\n\n//       const updatedLikeCount = likeResponse.data.likesCount;\n\n//       console.log(\"Updated Like Count:\", updatedLikeCount);\n\n//       // Update the UI to reflect the new like count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 likes_count: updatedLikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking post:\", error);\n//     }\n//   };\n\n//   const handleDislikePost = async (postId) => {\n//     try {\n//       // Send a POST request to dislike the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post disliked successfully\");\n\n//       // Fetch the updated dislike count\n//       const dislikeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/dislikes`\n//       ); // Use the new \"dislikes\" route\n\n//       const updatedDislikeCount = dislikeResponse.data.dislikesCount;\n\n//       console.log(\"Updated Dislike Count:\", updatedDislikeCount);\n\n//       // Update the UI to reflect the new dislike count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 dislikes_count: updatedDislikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking post:\", error);\n//     }\n//   }; // Move this closing curly brace to here\n\n//   const handlePostClick = (postId) => {\n//     // Toggle the expanded state of the post\n//     if (postId === expandedPostId) {\n//       // Collapse the post if it's already expanded\n//       setExpandedPostId(null);\n//     } else {\n//       // Expand the clicked post\n//       setExpandedPostId(postId);\n//     }\n//   };\n\n//   return (\n//     <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div\n//             key={index}\n//             className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n//           >\n//             <h3 className=\"post-title\">{post.title}</h3>\n//             <p className=\"post-author\">By {post.author}</p>\n//             <div className=\"post-content\">\n//               {post.id === expandedPostId ? post.content : post.content.slice(0, 200) + '...'}\n//               {/* Display only a portion of content if not expanded */}\n//             </div>\n//             {post.image_url && (\n//               <img\n//                 src={`${apiBaseUrl}${post.image_url}`}\n//                 alt={post.title}\n//                 className=\"post-image\"\n//                 onLoad={() => console.log(\"Image loaded successfully\")}\n//                 onError={() => console.error(\"Image loading error\")}\n//               />\n//             )}\n//             <div>\n//               <button onClick={() => handleLikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n//                 <span>{post.likes_count}</span>\n//               </button>\n//               <button onClick={() => handleDislikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n//                 <span>{post.dislikes_count}</span>\n//               </button>\n//             </div>\n//             {/* Add a \"Read More\" link to expand/collapse the post */}\n//             <div className=\"read-more\" onClick={() => handlePostClick(post.id)}>\n//               {post.id === expandedPostId ? \"Read Less\" : \"Read More\"}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Blog;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport axios from \"axios\";\nimport \"./Blogs.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Blog = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [expandedPostId, setExpandedPostId] = useState(null);\n  const [comments, setComments] = useState({});\n  const [newComment, setNewComment] = useState(\"\");\n  const authToken = localStorage.getItem(\"authToken\");\n  const apiBaseUrl = \"http://localhost:3001\";\n  useEffect(() => {\n    // Fetch blog posts without comments initially\n    axios.get(`${apiBaseUrl}/posts`, {\n      headers: {\n        Authorization: `Bearer ${authToken}`,\n        Accept: \"application/json\"\n      }\n    }).then(response => {\n      setPosts(response.data);\n    }).catch(error => {\n      console.error(\"Error fetching posts:\", error);\n    });\n  }, [authToken, apiBaseUrl]);\n  useEffect(() => {\n    // Fetch comments when a blog post is expanded\n    if (expandedPostId !== null) {\n      axios.get(`${apiBaseUrl}/posts/${expandedPostId}/comments`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          Accept: \"application/json\"\n        }\n      }).then(response => {\n        setComments({\n          ...comments,\n          [expandedPostId]: response.data\n        });\n      }).catch(error => {\n        console.error(\"Error fetching comments:\", error);\n      });\n    }\n  }, [expandedPostId, authToken, apiBaseUrl, comments]);\n  const handleLikePost = async postId => {\n    try {\n      // Send a POST request to like the post\n      await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      console.log(\"Post liked successfully\");\n\n      // Fetch the updated like count\n      const likeResponse = await axios.get(`${apiBaseUrl}/posts/${postId}/likes`); // Use the new \"likes\" route\n\n      const updatedLikeCount = likeResponse.data.likesCount;\n      console.log(\"Updated Like Count:\", updatedLikeCount);\n\n      // Update the UI to reflect the new like count\n      setPosts(prevPosts => prevPosts.map(post => post.id === postId ? {\n        ...post,\n        likes_count: updatedLikeCount\n      } : post));\n    } catch (error) {\n      console.error(\"Error liking post:\", error);\n    }\n  };\n  const handleDislikePost = async postId => {\n    try {\n      // Send a POST request to dislike the post\n      await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`\n        }\n      });\n      console.log(\"Post disliked successfully\");\n\n      // Fetch the updated dislike count\n      const dislikeResponse = await axios.get(`${apiBaseUrl}/posts/${postId}/dislikes`); // Use the new \"dislikes\" route\n\n      const updatedDislikeCount = dislikeResponse.data.dislikesCount;\n      console.log(\"Updated Dislike Count:\", updatedDislikeCount);\n\n      // Update the UI to reflect the new dislike count\n      setPosts(prevPosts => prevPosts.map(post => post.id === postId ? {\n        ...post,\n        dislikes_count: updatedDislikeCount\n      } : post));\n    } catch (error) {\n      console.error(\"Error disliking post:\", error);\n    }\n  }; // Move this closing curly brace to here\n\n  const handlePostClick = postId => {\n    // Toggle the expanded state of the post\n    if (postId === expandedPostId) {\n      // Collapse the post if it's already expanded\n      setExpandedPostId(null);\n    } else {\n      // Expand the clicked post\n      setExpandedPostId(postId);\n    }\n  };\n  const handleCommentSubmit = async postId => {\n    try {\n      // Send a POST request to add a new comment\n      await axios.post(`${apiBaseUrl}/posts/${postId}/comments`, {\n        comment: newComment\n      }, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          \"Content-Type\": \"application/json\"\n        }\n      });\n\n      // Fetch updated comments and update the state\n      const commentResponse = await axios.get(`${apiBaseUrl}/posts/${postId}/comments`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          Accept: \"application/json\"\n        }\n      });\n      setComments({\n        ...comments,\n        [postId]: commentResponse.data\n      });\n      setNewComment(\"\"); // Clear the input field after submission\n    } catch (error) {\n      console.error(\"Error adding comment:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"blog\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Latest Blog Posts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"post-list\",\n      children: posts.map((post, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `post ${post.id === expandedPostId ? \"expanded\" : \"\"}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `post ${post.id === expandedPostId ? \"expanded\" : \"\"}`,\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"post-title\",\n            children: post.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 337,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"post-author\",\n            children: [\"By \", post.author]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"post-content\",\n            children: post.id === expandedPostId ? post.content : post.content.slice(0, 200) + '...'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this), post.image_url && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `${apiBaseUrl}${post.image_url}`,\n            alt: post.title,\n            className: \"post-image\",\n            onLoad: () => console.log(\"Image loaded successfully\"),\n            onError: () => console.error(\"Image loading error\")\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 344,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleLikePost(post.id),\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa fa-thumbs-up thumbs-up-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 354,\n                columnNumber: 17\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: post.likes_count\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 355,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 353,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleDislikePost(post.id),\n              children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                className: \"fa fa-thumbs-down thumbs-down-icon\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 17\n              }, this), \" \", /*#__PURE__*/_jsxDEV(\"span\", {\n                children: post.dislikes_count\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 359,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 357,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 352,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"read-more\",\n            onClick: () => handlePostClick(post.id),\n            children: post.id === expandedPostId ? \"Read Less\" : \"Read More\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 363,\n            columnNumber: 13\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }, this), post.id === expandedPostId && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"comments-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Comments:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: comments[post.id] && comments[post.id].map((comment, commentIndex) => /*#__PURE__*/_jsxDEV(\"li\", {\n              children: comment.text\n            }, commentIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 375,\n              columnNumber: 23\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => handleCommentSubmit(post.id),\n              children: \"Add Comment\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 380,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 324,\n    columnNumber: 5\n  }, this);\n};\n_s(Blog, \"TO1gWbSA14WyQk8hFI1+s6s5tDs=\");\n_c = Blog;\nexport default Blog;\nvar _c;\n$RefreshReg$(_c, \"Blog\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Blog","_s","posts","setPosts","expandedPostId","setExpandedPostId","comments","setComments","newComment","setNewComment","authToken","localStorage","getItem","apiBaseUrl","get","headers","Authorization","Accept","then","response","data","catch","error","console","handleLikePost","postId","post","log","likeResponse","updatedLikeCount","likesCount","prevPosts","map","id","likes_count","handleDislikePost","dislikeResponse","updatedDislikeCount","dislikesCount","dislikes_count","handlePostClick","handleCommentSubmit","comment","commentResponse","className","children","fileName","_jsxFileName","lineNumber","columnNumber","index","title","author","content","slice","image_url","src","alt","onLoad","onError","onClick","commentIndex","text","_c","$RefreshReg$"],"sources":["/home/markpaul/projects/Blog-client/src/components/Blogs/Blogs.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import \"font-awesome/css/font-awesome.min.css\";\n// import axios from \"axios\";\n// import \"./Blogs.css\";\n\n// const Blog = () => {\n//   const [posts, setPosts] = useState([]);\n//   const [expandedPostId, setExpandedPostId] = useState(null); // Track the expanded post\n//   const authToken = localStorage.getItem(\"authToken\");\n//   const apiBaseUrl = \"http://localhost:3001\";\n\n//   useEffect(() => {\n//     // Fetch blog posts with their like and dislike counts\n//     axios\n//       .get(`${apiBaseUrl}/posts`, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//           Accept: \"application/json\",\n//         },\n//       })\n//       .then((response) => {\n//         setPosts(response.data);\n//       })\n//       .catch((error) => {\n//         console.error(\"Error fetching posts:\", error);\n//       });\n//   }, [authToken, apiBaseUrl]);\n\n//   const handleLikePost = async (postId) => {\n//     try {\n//       // Send a POST request to like the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post liked successfully\");\n\n//       // Fetch the updated like count\n//       const likeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/likes`\n//       ); // Use the new \"likes\" route\n\n//       const updatedLikeCount = likeResponse.data.likesCount;\n\n//       console.log(\"Updated Like Count:\", updatedLikeCount);\n\n//       // Update the UI to reflect the new like count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 likes_count: updatedLikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error liking post:\", error);\n//     }\n//   };\n\n//   const handleDislikePost = async (postId) => {\n//     try {\n//       // Send a POST request to dislike the post\n//       await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n//         headers: {\n//           Authorization: `Bearer ${authToken}`,\n//         },\n//       });\n\n//       console.log(\"Post disliked successfully\");\n\n//       // Fetch the updated dislike count\n//       const dislikeResponse = await axios.get(\n//         `${apiBaseUrl}/posts/${postId}/dislikes`\n//       ); // Use the new \"dislikes\" route\n\n//       const updatedDislikeCount = dislikeResponse.data.dislikesCount;\n\n//       console.log(\"Updated Dislike Count:\", updatedDislikeCount);\n\n//       // Update the UI to reflect the new dislike count\n//       setPosts((prevPosts) =>\n//         prevPosts.map((post) =>\n//           post.id === postId\n//             ? {\n//                 ...post,\n//                 dislikes_count: updatedDislikeCount,\n//               }\n//             : post\n//         )\n//       );\n//     } catch (error) {\n//       console.error(\"Error disliking post:\", error);\n//     }\n//   }; // Move this closing curly brace to here\n\n//   const handlePostClick = (postId) => {\n//     // Toggle the expanded state of the post\n//     if (postId === expandedPostId) {\n//       // Collapse the post if it's already expanded\n//       setExpandedPostId(null);\n//     } else {\n//       // Expand the clicked post\n//       setExpandedPostId(postId);\n//     }\n//   };\n\n//   return (\n//     <div className=\"blog\">\n//       <h2>Latest Blog Posts</h2>\n//       <div className=\"post-list\">\n//         {posts.map((post, index) => (\n//           <div\n//             key={index}\n//             className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n//           >\n//             <h3 className=\"post-title\">{post.title}</h3>\n//             <p className=\"post-author\">By {post.author}</p>\n//             <div className=\"post-content\">\n//               {post.id === expandedPostId ? post.content : post.content.slice(0, 200) + '...'}\n//               {/* Display only a portion of content if not expanded */}\n//             </div>\n//             {post.image_url && (\n//               <img\n//                 src={`${apiBaseUrl}${post.image_url}`}\n//                 alt={post.title}\n//                 className=\"post-image\"\n//                 onLoad={() => console.log(\"Image loaded successfully\")}\n//                 onError={() => console.error(\"Image loading error\")}\n//               />\n//             )}\n//             <div>\n//               <button onClick={() => handleLikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n//                 <span>{post.likes_count}</span>\n//               </button>\n//               <button onClick={() => handleDislikePost(post.id)}>\n//                 <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n//                 <span>{post.dislikes_count}</span>\n//               </button>\n//             </div>\n//             {/* Add a \"Read More\" link to expand/collapse the post */}\n//             <div className=\"read-more\" onClick={() => handlePostClick(post.id)}>\n//               {post.id === expandedPostId ? \"Read Less\" : \"Read More\"}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Blog;\n\nimport React, { useState, useEffect } from \"react\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport axios from \"axios\";\nimport \"./Blogs.css\";\n\nconst Blog = () => {\n  const [posts, setPosts] = useState([]);\n  const [expandedPostId, setExpandedPostId] = useState(null);\n  const [comments, setComments] = useState({});\n  const [newComment, setNewComment] = useState(\"\");\n  const authToken = localStorage.getItem(\"authToken\");\n  const apiBaseUrl = \"http://localhost:3001\";\n\n  useEffect(() => {\n    // Fetch blog posts without comments initially\n    axios\n      .get(`${apiBaseUrl}/posts`, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n          Accept: \"application/json\",\n        },\n      })\n      .then((response) => {\n        setPosts(response.data);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching posts:\", error);\n      });\n  }, [authToken, apiBaseUrl]);\n\n  useEffect(() => {\n    // Fetch comments when a blog post is expanded\n    if (expandedPostId !== null) {\n      axios\n        .get(`${apiBaseUrl}/posts/${expandedPostId}/comments`, {\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n            Accept: \"application/json\",\n          },\n        })\n        .then((response) => {\n          setComments({ ...comments, [expandedPostId]: response.data });\n        })\n        .catch((error) => {\n          console.error(\"Error fetching comments:\", error);\n        });\n    }\n  }, [expandedPostId, authToken, apiBaseUrl, comments]);\n\n  const handleLikePost = async (postId) => {\n    try {\n      // Send a POST request to like the post\n      await axios.post(`${apiBaseUrl}/posts/${postId}/like`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      console.log(\"Post liked successfully\");\n\n      // Fetch the updated like count\n      const likeResponse = await axios.get(\n        `${apiBaseUrl}/posts/${postId}/likes`\n      ); // Use the new \"likes\" route\n\n      const updatedLikeCount = likeResponse.data.likesCount;\n\n      console.log(\"Updated Like Count:\", updatedLikeCount);\n\n      // Update the UI to reflect the new like count\n      setPosts((prevPosts) =>\n        prevPosts.map((post) =>\n          post.id === postId\n            ? {\n                ...post,\n                likes_count: updatedLikeCount,\n              }\n            : post\n        )\n      );\n    } catch (error) {\n      console.error(\"Error liking post:\", error);\n    }\n  };\n\n  const handleDislikePost = async (postId) => {\n    try {\n      // Send a POST request to dislike the post\n      await axios.post(`${apiBaseUrl}/posts/${postId}/dislike`, null, {\n        headers: {\n          Authorization: `Bearer ${authToken}`,\n        },\n      });\n\n      console.log(\"Post disliked successfully\");\n\n      // Fetch the updated dislike count\n      const dislikeResponse = await axios.get(\n        `${apiBaseUrl}/posts/${postId}/dislikes`\n      ); // Use the new \"dislikes\" route\n\n      const updatedDislikeCount = dislikeResponse.data.dislikesCount;\n\n      console.log(\"Updated Dislike Count:\", updatedDislikeCount);\n\n      // Update the UI to reflect the new dislike count\n      setPosts((prevPosts) =>\n        prevPosts.map((post) =>\n          post.id === postId\n            ? {\n                ...post,\n                dislikes_count: updatedDislikeCount,\n              }\n            : post\n        )\n      );\n    } catch (error) {\n      console.error(\"Error disliking post:\", error);\n    }\n  }; // Move this closing curly brace to here\n\n  const handlePostClick = (postId) => {\n    // Toggle the expanded state of the post\n    if (postId === expandedPostId) {\n      // Collapse the post if it's already expanded\n      setExpandedPostId(null);\n    } else {\n      // Expand the clicked post\n      setExpandedPostId(postId);\n    }\n  };\n\n  const handleCommentSubmit = async (postId) => {\n    try {\n      // Send a POST request to add a new comment\n      await axios.post(\n        `${apiBaseUrl}/posts/${postId}/comments`,\n        { comment: newComment },\n        {\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      );\n\n      // Fetch updated comments and update the state\n      const commentResponse = await axios.get(\n        `${apiBaseUrl}/posts/${postId}/comments`,\n        {\n          headers: {\n            Authorization: `Bearer ${authToken}`,\n            Accept: \"application/json\",\n          },\n        }\n      );\n\n      setComments({ ...comments, [postId]: commentResponse.data });\n      setNewComment(\"\"); // Clear the input field after submission\n    } catch (error) {\n      console.error(\"Error adding comment:\", error);\n    }\n  };\n\n  return (\n    <div className=\"blog\">\n      <h2>Latest Blog Posts</h2>\n      <div className=\"post-list\">\n        {posts.map((post, index) => (\n          <div\n            key={index}\n            className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n          >\n            {/* ... (existing code) */}\n            <div\n            key={index}\n            className={`post ${post.id === expandedPostId ? \"expanded\" : \"\"}`}\n          >\n            <h3 className=\"post-title\">{post.title}</h3>\n            <p className=\"post-author\">By {post.author}</p>\n            <div className=\"post-content\">\n              {post.id === expandedPostId ? post.content : post.content.slice(0, 200) + '...'}\n              {/* Display only a portion of content if not expanded */}\n            </div>\n            {post.image_url && (\n              <img\n                src={`${apiBaseUrl}${post.image_url}`}\n                alt={post.title}\n                className=\"post-image\"\n                onLoad={() => console.log(\"Image loaded successfully\")}\n                onError={() => console.error(\"Image loading error\")}\n              />\n            )}\n            <div>\n              <button onClick={() => handleLikePost(post.id)}>\n                <i className=\"fa fa-thumbs-up thumbs-up-icon\"></i>{\" \"}\n                <span>{post.likes_count}</span>\n              </button>\n              <button onClick={() => handleDislikePost(post.id)}>\n                <i className=\"fa fa-thumbs-down thumbs-down-icon\"></i>{\" \"}\n                <span>{post.dislikes_count}</span>\n              </button>\n            </div>\n            {/* Add a \"Read More\" link to expand/collapse the post */}\n            <div className=\"read-more\" onClick={() => handlePostClick(post.id)}>\n              {post.id === expandedPostId ? \"Read Less\" : \"Read More\"}\n            </div>\n          </div>\n\n            {/* Display comments section */}\n            {post.id === expandedPostId && (\n              <div className=\"comments-section\">\n                <h4>Comments:</h4>\n                <ul>\n                  {comments[post.id] &&\n                    comments[post.id].map((comment, commentIndex) => (\n                      <li key={commentIndex}>{comment.text}</li>\n                    ))}\n                </ul>\n                <div>\n                 \n                  <button onClick={() => handleCommentSubmit(post.id)}>\n                    Add Comment\n                  </button>\n                </div>\n              </div>\n            )}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Blog;\n"],"mappings":";;AAAA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,uCAAuC;AAC9C,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErB,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,cAAc,EAAEC,iBAAiB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAC1D,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAMe,SAAS,GAAGC,YAAY,CAACC,OAA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}