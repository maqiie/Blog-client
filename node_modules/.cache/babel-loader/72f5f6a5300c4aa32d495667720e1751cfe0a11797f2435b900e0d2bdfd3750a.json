{"ast":null,"code":"var _jsxFileName = \"/home/markpaul/projects/Blog/client/src/components/register/login.js\",\n  _s = $RefreshSig$();\n// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n\n// // const Login = ({ onToggleForm }) => {\n// //   const [email, setEmail] = useState(\"\");\n// //   const [password, setPassword] = useState(\"\");\n// //   const [rememberMe, setRememberMe] = useState(false); // Added state for \"Remember me\"\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n// //         email,\n// //         password,\n// //         remember_me: rememberMe, // Send \"Remember me\" value in the request\n// //       });\n\n// //       if (response.status === 200) {\n// //         // Login successful, store the token in local storage\n// //         const authToken = response.headers[\"access-token\"];\n// //         const client = response.headers[\"client\"];\n// //         const uid = response.headers[\"uid\"];\n\n// //         localStorage.setItem(\"authToken\", authToken);\n// //         localStorage.setItem(\"client\", client);\n// //         localStorage.setItem(\"uid\", uid);\n\n// //         // Check if the token is stored\n// //         console.log(\"Login successful\");\n// //         console.log(\"Stored authToken:\", authToken);\n// //         console.log(\"Stored client:\", client);\n// //         console.log(\"Stored uid:\", uid);\n\n// //         // You can handle redirection or other actions here\n// //       } else {\n// //         // Handle login error\n// //         console.log(\"Login failed\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error logging in:\", error);\n// //     }\n// //   };\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\"; // Import useNavigate from React Router\n\n// // const Login = ({ onToggleForm }) => {\n// //   const navigate = useNavigate(); // Initialize the navigate function\n\n// //   const [email, setEmail] = useState(\"\");\n// //   const [password, setPassword] = useState(\"\");\n// //   const [rememberMe, setRememberMe] = useState(false);\n\n// //   useEffect(() => {\n// //     // Check for login state in local storage when the component mounts\n// //     const authToken = localStorage.getItem(\"authToken\");\n// //     if (authToken) {\n// //       // If the user is already logged in, navigate to the desired route\n// //       navigate(\"/createpost\"); // Change \"/dashboard\" to the route you want to navigate to\n// //     }\n// //   }, [navigate]);\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n// //         email,\n// //         password,\n// //         remember_me: rememberMe,\n// //       });\n\n// //       if (response.status === 200) {\n// //         const authToken = response.headers[\"access-token\"];\n// //         const client = response.headers[\"client\"];\n// //         const uid = response.headers[\"uid\"];\n\n// //         localStorage.setItem(\"authToken\", authToken);\n// //         localStorage.setItem(\"client\", client);\n// //         localStorage.setItem(\"uid\", uid);\n\n// //         console.log(\"Login successful\");\n// //         console.log(\"Stored authToken:\", authToken);\n// //         console.log(\"Stored client:\", client);\n// //         console.log(\"Stored uid:\", uid);\n\n// //         // Navigate to the desired route after a successful login\n// //         navigate(\"/createpost\"); // Change \"/dashboard\" to the route you want to navigate to\n// //       } else {\n// //         console.log(\"Login failed\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error logging in:\", error);\n// //     }\n// //   };\n// const Login = ({ onToggleForm }) => {\n//   const navigate = useNavigate();\n\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [rememberMe, setRememberMe] = useState(false);\n\n//   // Initialize isLoggedIn state by checking localStorage\n//   const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem(\"authToken\"));\n\n//   useEffect(() => {\n//     // Check for login state in local storage when the component mounts\n//     const authToken = localStorage.getItem(\"authToken\");\n//     if (authToken) {\n//       setIsLoggedIn(true); // User is logged in\n//       // Redirect to the desired route for logged-in users\n//       // navigate(\"/createpost\"); // Change \"/createpost\" to your desired route\n//     } else {\n//       setIsLoggedIn(false); // User is not logged in\n//     }\n//   }, [navigate]);\n\n// // const handleLogin = async (e) => {\n// //   e.preventDefault();\n\n// //   try {\n// //     const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n// //       email,\n// //       password,\n// //       remember_me: rememberMe,\n// //     });\n\n// //     if (response.status === 200) {\n// //       const authToken = response.headers[\"Authorization\"];\n// //       const client = response.headers[\"client\"];\n// //       const uid = response.headers[\"uid\"];\n\n// //       // Check if authToken is present and starts with \"Bearer \"\n// //       if (authToken && authToken.startsWith(\"Bearer \")) {\n// //         // Extract and store the Bearer token in local storage\n// //         const token = authToken.split(\"Bearer \")[1];\n// //         localStorage.setItem(\"authToken\", token);\n// //       } else {\n// //         console.log(\"Invalid Authorization header format.\");\n// //         return; // Handle the error appropriately\n// //       }\n\n// //       localStorage.setItem(\"client\", client);\n// //       localStorage.setItem(\"uid\", uid);\n\n// //       console.log(\"Login successful\");\n// //       console.log(\"Stored authToken:\", authToken);\n// //       console.log(\"Stored client:\", client);\n// //       console.log(\"Stored uid:\", uid);\n\n// //       setIsLoggedIn(true); // User is now logged in\n\n// //       // Navigate to the desired route after a successful login\n// //       navigate(\"/createpost\"); // Change \"/createpost\" to your desired route\n// //     } else {\n// //       console.log(\"Login failed\");\n// //     }\n// //   } catch (error) {\n// //     console.error(\"Error logging in:\", error);\n// //   }\n// // };\n// const handleLogin = async (e) => {\n//   e.preventDefault();\n\n//   try {\n//     const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n//       email,\n//       password,\n//       remember_me: rememberMe,\n//     });\n\n//     if (response.status === 200) {\n//       const authToken = response.headers[\"Authorization\"];\n//       const client = response.headers[\"client\"];\n//       const uid = response.headers[\"uid\"];\n\n//       localStorage.setItem(\"authToken\", authToken);\n//       localStorage.setItem(\"client\", client);\n//       localStorage.setItem(\"uid\", uid);\n\n//       console.log(\"Login successful\");\n//       console.log(\"Stored authToken:\", authToken);\n//       console.log(\"Stored client:\", client);\n//       console.log(\"Stored uid:\", uid);\n\n//       setIsLoggedIn(true); // User is now logged in\n\n//       // Navigate to the desired route after a successful login\n//       navigate(\"/createpost\"); // Change \"/createpost\" to your desired route\n//     } else {\n//       console.log(\"Login failed\");\n//     }\n//   } catch (error) {\n//     console.error(\"Error logging in:\", error);\n//   }\n// };\n\n//   return (\n//     <div className=\"auth-form bg-white p-6 rounded shadow\">\n//       <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Login</h2>\n//       <form onSubmit={handleLogin}>\n//         <div className=\"mb-3\">\n//           <label className=\"block text-sm font-medium text-gray-600\">\n//             Email\n//           </label>\n//           <input\n//             type=\"email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             className=\"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\"\n//             required\n//           />\n//         </div>\n//         <div className=\"mb-3\">\n//           <label className=\"block text-sm font-medium text-gray-600\">\n//             Password\n//           </label>\n//           <input\n//             type=\"password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//             className=\"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\"\n//             required\n//           />\n//         </div>\n//         <div className=\"mb-3\">\n//           <label className=\"block text-sm font-medium text-gray-600\">\n//             <input\n//               type=\"checkbox\"\n//               checked={rememberMe}\n//               onChange={() => setRememberMe(!rememberMe)}\n//               className=\"mr-1\"\n//             />\n//             Remember me\n//           </label>\n//         </div>\n//         <button\n//           type=\"submit\"\n//           className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition duration-300 shadow-md\"\n//         >\n//           Login\n//         </button>\n//       </form>\n//       <p className=\"mt-4\">\n//         Don't have an account?{\" \"}\n//         <button\n//           onClick={onToggleForm}\n//           className=\"text-blue-500 hover:underline focus:outline-none\"\n//         >\n//           Sign Up\n//         </button>\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default Login;\n\nimport React, { useState } from \"react\";\n// import axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Login = ({\n  onToggleForm\n}) => {\n  _s();\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [rememberMe, setRememberMe] = useState(false);\n  const [error, setError] = useState(null);\n\n  // const handleLogin = async (e) => {\n  //   e.preventDefault();\n\n  //   try {\n  //     const response = await axios.post(\n  //       \"http://localhost:3001/auth/sign_in\",\n  //       {\n  //         email,\n  //         password,\n  //         remember_me: rememberMe,\n  //       },\n  //       {\n  //         headers: {\n  //           \"Content-Type\": \"application/json\",\n  //         },\n  //       }\n  //     );\n\n  //     if (response.status === 200) {\n  //       const authTokenHeader = response.headers.get(\"Authorization\");\n  //       // if (authTokenHeader) {\n  //       //   // Now you can work with authTokenHeader\n  //       //   const authToken = authTokenHeader.split(\"Bearer \")[1]; // Split the header to get the token\n  //       //   console.log(\"Stored authToken:\", authToken);\n  //       //   // ...\n  //       // }\n  //       // const authTokenHeader = response.headers[\"Authorization\"];\n  //       console.log(\"Response:\", response);\n  //       console.log(\"Response Headers:\", response.headers);\n\n  //       if (authTokenHeader) {\n  //         const authToken = authTokenHeader.split(\"Bearer \")[1]; // Split the header to get the token\n\n  //         if (authToken) {\n  //           localStorage.setItem(\"authToken\", authToken);\n  //           console.log(\"Stored authToken:\", authToken);\n  //           navigate(\"/createpost\"); // Redirect upon successful login\n  //         } else {\n  //           setError(\"Invalid Authorization header format.\");\n  //         }\n  //       } else {\n  //         setError(\"Authorization header not found in response.\");\n  //       }\n  //     } else {\n  //       setError(\"Login failed. Check your credentials.\");\n  //       console.error(\"Login failed. Response:\", response);\n  //     }\n  //   } catch (error) {\n  //     setError(\"Error logging in. Please try again later.\");\n  //     console.error(\"Error logging in:\", error);\n  //   }\n  // };\n  const handleLogin = async e => {\n    e.preventDefault();\n    try {\n      // const response = await fetch(\"http://localhost:3001/auth/sign_in\", {\n      //   method: \"POST\",\n      //   headers: {\n      //     \"Content-Type\": \"application/json\",\n      //     // \"Authorization \": `Bearer ${token}` \n      //   },\n      //   body: JSON.stringify({\n      //     email,\n      //     password,\n      //     remember_me: rememberMe,\n      //   }),\n      // });\n\n      if (response.status === 200) {\n        const authTokenHeader = response.headers[\"authorization\"]; // Note the lowercase \"authorization\" header key\n        console.log(\"Response Headers:\", response.headers);\n        if (authTokenHeader) {\n          const authToken = authTokenHeader.split(\"Bearer \")[1]; // Split the header to get the token\n          if (authToken) {\n            localStorage.setItem(\"authToken\", authToken);\n            console.log(\"Stored authToken:\", authToken);\n            navigate(\"/createpost\"); // Redirect upon successful login\n          } else {\n            setError(\"Invalid Authorization header format.\");\n          }\n        } else {\n          setError(\"Authorization header not found in response.\");\n        }\n\n        // const authTokenHeader = response.headers.get(\"Authorization\");\n\n        // if (authTokenHeader) {\n        //   const authToken = authTokenHeader.split(\"Bearer \")[1]; // Split the header to get the token\n        //   localStorage.setItem(\"authToken\", authToken);\n        //   console.log(\"Stored authToken:\", authToken);\n        //   navigate(\"/createpost\"); // Redirect upon successful login\n        // } else {\n        //   setError(\"Invalid Authorization header format.\");\n        // }\n      } else {\n        setError(\"Login failed. Check your credentials.\");\n        console.error(\"Login failed. Response:\", response);\n      }\n    } catch (error) {\n      setError(\"Error logging in. Please try again later.\");\n      console.error(\"Error logging in:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"auth-form bg-white p-6 rounded shadow\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold mb-4 text-blue-600\",\n      children: \"Login\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 384,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"text-red-500\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleLogin,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium text-gray-600\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          value: email,\n          onChange: e => setEmail(e.target.value),\n          className: \"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium text-gray-600\",\n          children: \"Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          value: password,\n          onChange: e => setPassword(e.target.value),\n          className: \"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\",\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"block text-sm font-medium text-gray-600\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            checked: rememberMe,\n            onChange: () => setRememberMe(!rememberMe),\n            className: \"mr-1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 13\n          }, this), \"Remember me\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 412,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition duration-300 shadow-md\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 386,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"mt-4\",\n      children: [\"Don't have an account?\", \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onToggleForm,\n        className: \"text-blue-500 hover:underline focus:outline-none\",\n        children: \"Sign Up\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 383,\n    columnNumber: 5\n  }, this);\n};\n_s(Login, \"fWxuMxc5lO5y7VTT5XMtF5Z8e4M=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","Login","onToggleForm","_s","navigate","email","setEmail","password","setPassword","rememberMe","setRememberMe","error","setError","handleLogin","e","preventDefault","response","status","authTokenHeader","headers","console","log","authToken","split","localStorage","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","required","checked","onClick","_c","$RefreshReg$"],"sources":["/home/markpaul/projects/Blog/client/src/components/register/login.js"],"sourcesContent":["// // import React, { useState } from \"react\";\n// // import axios from \"axios\";\n\n// // const Login = ({ onToggleForm }) => {\n// //   const [email, setEmail] = useState(\"\");\n// //   const [password, setPassword] = useState(\"\");\n// //   const [rememberMe, setRememberMe] = useState(false); // Added state for \"Remember me\"\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n// //         email,\n// //         password,\n// //         remember_me: rememberMe, // Send \"Remember me\" value in the request\n// //       });\n\n// //       if (response.status === 200) {\n// //         // Login successful, store the token in local storage\n// //         const authToken = response.headers[\"access-token\"];\n// //         const client = response.headers[\"client\"];\n// //         const uid = response.headers[\"uid\"];\n\n// //         localStorage.setItem(\"authToken\", authToken);\n// //         localStorage.setItem(\"client\", client);\n// //         localStorage.setItem(\"uid\", uid);\n\n// //         // Check if the token is stored\n// //         console.log(\"Login successful\");\n// //         console.log(\"Stored authToken:\", authToken);\n// //         console.log(\"Stored client:\", client);\n// //         console.log(\"Stored uid:\", uid);\n\n// //         // You can handle redirection or other actions here\n// //       } else {\n// //         // Handle login error\n// //         console.log(\"Login failed\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error logging in:\", error);\n// //     }\n// //   };\n// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\"; // Import useNavigate from React Router\n\n// // const Login = ({ onToggleForm }) => {\n// //   const navigate = useNavigate(); // Initialize the navigate function\n\n// //   const [email, setEmail] = useState(\"\");\n// //   const [password, setPassword] = useState(\"\");\n// //   const [rememberMe, setRememberMe] = useState(false);\n\n// //   useEffect(() => {\n// //     // Check for login state in local storage when the component mounts\n// //     const authToken = localStorage.getItem(\"authToken\");\n// //     if (authToken) {\n// //       // If the user is already logged in, navigate to the desired route\n// //       navigate(\"/createpost\"); // Change \"/dashboard\" to the route you want to navigate to\n// //     }\n// //   }, [navigate]);\n\n// //   const handleLogin = async (e) => {\n// //     e.preventDefault();\n\n// //     try {\n// //       const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n// //         email,\n// //         password,\n// //         remember_me: rememberMe,\n// //       });\n\n// //       if (response.status === 200) {\n// //         const authToken = response.headers[\"access-token\"];\n// //         const client = response.headers[\"client\"];\n// //         const uid = response.headers[\"uid\"];\n\n// //         localStorage.setItem(\"authToken\", authToken);\n// //         localStorage.setItem(\"client\", client);\n// //         localStorage.setItem(\"uid\", uid);\n\n// //         console.log(\"Login successful\");\n// //         console.log(\"Stored authToken:\", authToken);\n// //         console.log(\"Stored client:\", client);\n// //         console.log(\"Stored uid:\", uid);\n\n// //         // Navigate to the desired route after a successful login\n// //         navigate(\"/createpost\"); // Change \"/dashboard\" to the route you want to navigate to\n// //       } else {\n// //         console.log(\"Login failed\");\n// //       }\n// //     } catch (error) {\n// //       console.error(\"Error logging in:\", error);\n// //     }\n// //   };\n// const Login = ({ onToggleForm }) => {\n//   const navigate = useNavigate();\n\n//   const [email, setEmail] = useState(\"\");\n//   const [password, setPassword] = useState(\"\");\n//   const [rememberMe, setRememberMe] = useState(false);\n\n//   // Initialize isLoggedIn state by checking localStorage\n//   const [isLoggedIn, setIsLoggedIn] = useState(!!localStorage.getItem(\"authToken\"));\n\n//   useEffect(() => {\n//     // Check for login state in local storage when the component mounts\n//     const authToken = localStorage.getItem(\"authToken\");\n//     if (authToken) {\n//       setIsLoggedIn(true); // User is logged in\n//       // Redirect to the desired route for logged-in users\n//       // navigate(\"/createpost\"); // Change \"/createpost\" to your desired route\n//     } else {\n//       setIsLoggedIn(false); // User is not logged in\n//     }\n//   }, [navigate]);\n\n// // const handleLogin = async (e) => {\n// //   e.preventDefault();\n\n// //   try {\n// //     const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n// //       email,\n// //       password,\n// //       remember_me: rememberMe,\n// //     });\n\n// //     if (response.status === 200) {\n// //       const authToken = response.headers[\"Authorization\"];\n// //       const client = response.headers[\"client\"];\n// //       const uid = response.headers[\"uid\"];\n\n// //       // Check if authToken is present and starts with \"Bearer \"\n// //       if (authToken && authToken.startsWith(\"Bearer \")) {\n// //         // Extract and store the Bearer token in local storage\n// //         const token = authToken.split(\"Bearer \")[1];\n// //         localStorage.setItem(\"authToken\", token);\n// //       } else {\n// //         console.log(\"Invalid Authorization header format.\");\n// //         return; // Handle the error appropriately\n// //       }\n\n// //       localStorage.setItem(\"client\", client);\n// //       localStorage.setItem(\"uid\", uid);\n\n// //       console.log(\"Login successful\");\n// //       console.log(\"Stored authToken:\", authToken);\n// //       console.log(\"Stored client:\", client);\n// //       console.log(\"Stored uid:\", uid);\n\n// //       setIsLoggedIn(true); // User is now logged in\n\n// //       // Navigate to the desired route after a successful login\n// //       navigate(\"/createpost\"); // Change \"/createpost\" to your desired route\n// //     } else {\n// //       console.log(\"Login failed\");\n// //     }\n// //   } catch (error) {\n// //     console.error(\"Error logging in:\", error);\n// //   }\n// // };\n// const handleLogin = async (e) => {\n//   e.preventDefault();\n\n//   try {\n//     const response = await axios.post(\"http://localhost:3001/auth/sign_in\", {\n//       email,\n//       password,\n//       remember_me: rememberMe,\n//     });\n\n//     if (response.status === 200) {\n//       const authToken = response.headers[\"Authorization\"];\n//       const client = response.headers[\"client\"];\n//       const uid = response.headers[\"uid\"];\n\n//       localStorage.setItem(\"authToken\", authToken);\n//       localStorage.setItem(\"client\", client);\n//       localStorage.setItem(\"uid\", uid);\n\n//       console.log(\"Login successful\");\n//       console.log(\"Stored authToken:\", authToken);\n//       console.log(\"Stored client:\", client);\n//       console.log(\"Stored uid:\", uid);\n\n//       setIsLoggedIn(true); // User is now logged in\n\n//       // Navigate to the desired route after a successful login\n//       navigate(\"/createpost\"); // Change \"/createpost\" to your desired route\n//     } else {\n//       console.log(\"Login failed\");\n//     }\n//   } catch (error) {\n//     console.error(\"Error logging in:\", error);\n//   }\n// };\n\n//   return (\n//     <div className=\"auth-form bg-white p-6 rounded shadow\">\n//       <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Login</h2>\n//       <form onSubmit={handleLogin}>\n//         <div className=\"mb-3\">\n//           <label className=\"block text-sm font-medium text-gray-600\">\n//             Email\n//           </label>\n//           <input\n//             type=\"email\"\n//             value={email}\n//             onChange={(e) => setEmail(e.target.value)}\n//             className=\"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\"\n//             required\n//           />\n//         </div>\n//         <div className=\"mb-3\">\n//           <label className=\"block text-sm font-medium text-gray-600\">\n//             Password\n//           </label>\n//           <input\n//             type=\"password\"\n//             value={password}\n//             onChange={(e) => setPassword(e.target.value)}\n//             className=\"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\"\n//             required\n//           />\n//         </div>\n//         <div className=\"mb-3\">\n//           <label className=\"block text-sm font-medium text-gray-600\">\n//             <input\n//               type=\"checkbox\"\n//               checked={rememberMe}\n//               onChange={() => setRememberMe(!rememberMe)}\n//               className=\"mr-1\"\n//             />\n//             Remember me\n//           </label>\n//         </div>\n//         <button\n//           type=\"submit\"\n//           className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition duration-300 shadow-md\"\n//         >\n//           Login\n//         </button>\n//       </form>\n//       <p className=\"mt-4\">\n//         Don't have an account?{\" \"}\n//         <button\n//           onClick={onToggleForm}\n//           className=\"text-blue-500 hover:underline focus:outline-none\"\n//         >\n//           Sign Up\n//         </button>\n//       </p>\n//     </div>\n//   );\n// };\n\n// export default Login;\n\nimport React, { useState } from \"react\";\n// import axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Login = ({ onToggleForm }) => {\n  const navigate = useNavigate();\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [rememberMe, setRememberMe] = useState(false);\n  const [error, setError] = useState(null);\n\n  // const handleLogin = async (e) => {\n  //   e.preventDefault();\n\n  //   try {\n  //     const response = await axios.post(\n  //       \"http://localhost:3001/auth/sign_in\",\n  //       {\n  //         email,\n  //         password,\n  //         remember_me: rememberMe,\n  //       },\n  //       {\n  //         headers: {\n  //           \"Content-Type\": \"application/json\",\n  //         },\n  //       }\n  //     );\n\n  //     if (response.status === 200) {\n  //       const authTokenHeader = response.headers.get(\"Authorization\");\n  //       // if (authTokenHeader) {\n  //       //   // Now you can work with authTokenHeader\n  //       //   const authToken = authTokenHeader.split(\"Bearer \")[1]; // Split the header to get the token\n  //       //   console.log(\"Stored authToken:\", authToken);\n  //       //   // ...\n  //       // }\n  //       // const authTokenHeader = response.headers[\"Authorization\"];\n  //       console.log(\"Response:\", response);\n  //       console.log(\"Response Headers:\", response.headers);\n\n  //       if (authTokenHeader) {\n  //         const authToken = authTokenHeader.split(\"Bearer \")[1]; // Split the header to get the token\n\n  //         if (authToken) {\n  //           localStorage.setItem(\"authToken\", authToken);\n  //           console.log(\"Stored authToken:\", authToken);\n  //           navigate(\"/createpost\"); // Redirect upon successful login\n  //         } else {\n  //           setError(\"Invalid Authorization header format.\");\n  //         }\n  //       } else {\n  //         setError(\"Authorization header not found in response.\");\n  //       }\n  //     } else {\n  //       setError(\"Login failed. Check your credentials.\");\n  //       console.error(\"Login failed. Response:\", response);\n  //     }\n  //   } catch (error) {\n  //     setError(\"Error logging in. Please try again later.\");\n  //     console.error(\"Error logging in:\", error);\n  //   }\n  // };\n  const handleLogin = async (e) => {\n    e.preventDefault();\n  \n    try {\n      // const response = await fetch(\"http://localhost:3001/auth/sign_in\", {\n      //   method: \"POST\",\n      //   headers: {\n      //     \"Content-Type\": \"application/json\",\n      //     // \"Authorization \": `Bearer ${token}` \n      //   },\n      //   body: JSON.stringify({\n      //     email,\n      //     password,\n      //     remember_me: rememberMe,\n      //   }),\n      // });\n  \n      if (response.status === 200) {\n\n        const authTokenHeader = response.headers[\"authorization\"]; // Note the lowercase \"authorization\" header key\n        console.log(\"Response Headers:\", response.headers);\n\n        if (authTokenHeader) {\n          const authToken = authTokenHeader.split(\"Bearer \")[1]; // Split the header to get the token\n          if (authToken) {\n            localStorage.setItem(\"authToken\", authToken);\n            console.log(\"Stored authToken:\", authToken);\n            navigate(\"/createpost\"); // Redirect upon successful login\n          } else {\n            setError(\"Invalid Authorization header format.\");\n          }\n        } else {\n          setError(\"Authorization header not found in response.\");\n        }\n        \n        \n\n\n        // const authTokenHeader = response.headers.get(\"Authorization\");\n  \n        // if (authTokenHeader) {\n        //   const authToken = authTokenHeader.split(\"Bearer \")[1]; // Split the header to get the token\n        //   localStorage.setItem(\"authToken\", authToken);\n        //   console.log(\"Stored authToken:\", authToken);\n        //   navigate(\"/createpost\"); // Redirect upon successful login\n        // } else {\n        //   setError(\"Invalid Authorization header format.\");\n        // }\n      } else {\n        setError(\"Login failed. Check your credentials.\");\n        console.error(\"Login failed. Response:\", response);\n      }\n    } catch (error) {\n      setError(\"Error logging in. Please try again later.\");\n      console.error(\"Error logging in:\", error);\n    }\n  };\n  \n\n  return (\n    <div className=\"auth-form bg-white p-6 rounded shadow\">\n      <h2 className=\"text-2xl font-semibold mb-4 text-blue-600\">Login</h2>\n      {error && <p className=\"text-red-500\">{error}</p>}\n      <form onSubmit={handleLogin}>\n        <div className=\"mb-3\">\n          <label className=\"block text-sm font-medium text-gray-600\">\n            Email\n          </label>\n          <input\n            type=\"email\"\n            value={email}\n            onChange={(e) => setEmail(e.target.value)}\n            className=\"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\"\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label className=\"block text-sm font-medium text-gray-600\">\n            Password\n          </label>\n          <input\n            type=\"password\"\n            value={password}\n            onChange={(e) => setPassword(e.target.value)}\n            className=\"mt-1 p-2 border rounded border-solid border-blue-400 w-full focus:border-blue-400 focus:outline-none\"\n            required\n          />\n        </div>\n        <div className=\"mb-3\">\n          <label className=\"block text-sm font-medium text-gray-600\">\n            <input\n              type=\"checkbox\"\n              checked={rememberMe}\n              onChange={() => setRememberMe(!rememberMe)}\n              className=\"mr-1\"\n            />\n            Remember me\n          </label>\n        </div>\n        <button\n          type=\"submit\"\n          className=\"bg-blue-500 hover:bg-blue-600 text-white py-2 px-4 rounded transition duration-300 shadow-md\"\n        >\n          Login\n        </button>\n      </form>\n      <p className=\"mt-4\">\n        Don't have an account?{\" \"}\n        <button\n          onClick={onToggleForm}\n          className=\"text-blue-500 hover:underline focus:outline-none\"\n        >\n          Sign Up\n        </button>\n      </p>\n    </div>\n  );\n};\n\nexport default Login;\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}